<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王约翰的博客</title>
  <icon>https://www.gravatar.com/avatar/d0dbd4edea66450944b7ce7004292962</icon>
  <subtitle>你敲代码好像cxk啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuehan.github.io/"/>
  <updated>2019-06-02T04:40:57.786Z</updated>
  <id>http://wangyuehan.github.io/</id>
  
  <author>
    <name>John Wang</name>
    <email>wangyuehanw1y2r3@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊品牌-耐克（二）</title>
    <link href="http://wangyuehan.github.io/year/06/02/%E8%81%8A%E8%81%8A%E5%93%81%E7%89%8C-%E8%80%90%E5%85%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://wangyuehan.github.io/year/06/02/聊聊品牌-耐克（二）/</id>
    <published>2019-06-02T04:04:41.000Z</published>
    <updated>2019-06-02T04:40:57.786Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://prj8y63ca.bkt.clouddn.com/2019-06-02-040659.jpg" alt></p><a id="more"></a><h1 id="耐克商标的由来"><a href="#耐克商标的由来" class="headerlink" title="耐克商标的由来"></a>耐克商标的由来</h1><p>在菲尔·奈特独立做品牌的想法冒出来后，奈特组织了自己的团队找了一家新的制鞋工厂，当然，首先，属于自己品牌的logo是非常重要。</p><p>由于那时候阿迪达斯、鬼冢虎等等品牌logo深入人心，所以自己公司的logo一定要有区分，让人一看就感觉不一样。这时候，奈特找来自己之前公司做宣传海报的设计人员——28岁的平面设计专业学生卡罗琳·戴维森，将自己心中的要求说给了她。</p><p>大约过了两个礼拜，戴维森拿着一堆的设计草图回来，这时候有个同事说，哇，这个图案好看啊，这个符号看起来像”嗖”的一声在空气中留下的痕迹。于是这个对勾就被命名为swoosh，在英文里就是”嗖的一声”的意思。最后，奈特采纳了这个logo设计，奈特给了戴维森35美元的设计费。现在想想，😂😂😂。世事难料，谁会想到耐克如今做的这么厉害。</p><p>这就是耐克经典logo的来历。</p><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-06-02-041425.jpg" alt></p><h1 id="耐克名字的由来"><a href="#耐克名字的由来" class="headerlink" title="耐克名字的由来"></a>耐克名字的由来</h1><p>logo设计出来后，大家开始想名字的问题，有很多人说出自己的看法（主要是当时公司没什么人😂），很多人都选择”动物”名字，比如”孟加拉虎”、”猎鹰”等等。奈特通通都否决了。</p><p>因为工厂生产的日期马上要到了，名字必须要赶紧定下来，这时候，一个名叫杰夫·约翰逊的员工，这个人也是耐克第一号全职员工，据说他在睡梦中梦到了古希腊传说中的胜利女神——Nike。</p><p>约翰逊醒来后赶紧把这个灵感告诉了菲尔·奈特，奈特听到后，还是有些犹豫，最后在传真机面前输入了N-I-K-E四个字母，发给了工厂。</p><h1 id="耐克的鞋盒"><a href="#耐克的鞋盒" class="headerlink" title="耐克的鞋盒"></a>耐克的鞋盒</h1><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-06-02-042453.jpg" alt></p><p>因为那时候，其他著名品牌比如阿迪达斯等等都是千篇一律的蓝色或者白色，奈特想区别开，定下了橙色。</p><h1 id="耐克上市"><a href="#耐克上市" class="headerlink" title="耐克上市"></a>耐克上市</h1><p>早在耐克前身蓝带体育公司时候，奈特就很为钱发愁。</p><p>1972年耐克成立。</p><p>1975年，因为给经销商交钱，公司也无力支付了，同很多初创企业一样，都会面临着资金周转的问题，尤其是快时尚的运动品牌，库存问题、消费者的喜好、成本问题等等都会导致鞋子卖不出去。而且那时候，很多投资公司都在投资大热的半导体公司，至于卖鞋卖衣服的公司，根本不正眼看，银行贷款也是难上加难。</p><p>之后甚至有一段日子，耐克会过着债主们上门讨债的情况。</p><p>到了1980年，耐克在北美第一次超过了阿迪达斯，达到了50%份额，但是还是缺钱。这时候，上市就必须要提上日程了，但是对于生性腼腆的奈特不太想上市，因为要面对头疼的事情，但是为了公司，只能这样做。</p><p>1980年上市后，菲尔·奈特身价达到了1.78亿美金。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://prj8y63ca.bkt.clouddn.com/2019-06-02-040659.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://wangyuehan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://wangyuehan.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构(一)</title>
    <link href="http://wangyuehan.github.io/year/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    <id>http://wangyuehan.github.io/year/05/28/微服务架构/</id>
    <published>2019-05-28T05:39:26.000Z</published>
    <updated>2019-05-28T07:11:27.108Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章根据胡老师讲解，针对微服务学习进行梳理交流学习。</p><a id="more"></a><p>微服务在维基百科中给出的定义是：</p><p>微服务的概念最早是在2014年由Martin Fowler和James Lewis共同提出，他们定义了微服务是由单一应用程序构成的小服务，拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API通讯。同时，服务会使用最小规模的集中管理 (例如Docker)技术，服务可以用不同的编程语言与数据库等。</p><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-054618.jpg" alt><img src="/Users/wangyurui/Library/Application Support/typora-user-images/image-20190528134639918.png" alt="image-20190528134639918"></p><p>（左边是Martin Fowler，右边是James Lewis）</p><h1 id="1-单体应用"><a href="#1-单体应用" class="headerlink" title="1. 单体应用"></a>1. 单体应用</h1><p>早些时候，各大互联网公司应用技术栈分为LAMP和MVC两派。其中LAMP指的是（Linux + Apache + MySQL + PHP），MVC指的是（Spring +iBatis/Hibernate + Tomcat）。无论是LAMP还是MVC，都是为单体应用架构设计的，其优点是学习成本低，开发上手快，测试、部署、运维也比较方便，甚至一个人就可以完成一个网站的开发与部署。</p><p>但是随着业务壮大，团队成员不断增加，单体应用架构出现问题，常见的问题如下：</p><ol><li>部署效率低下。</li><li>团队协作开发的成本高。</li><li>系统高可用差。</li><li>线上发布慢。</li></ol><h2 id="1-部署效率低下"><a href="#1-部署效率低下" class="headerlink" title="1. 部署效率低下"></a>1. 部署效率低下</h2><p>单体应用代码越来越多，依赖资源越来越多时候，应用编译打包、部署测试的时间甚至需要10分钟以上。</p><h2 id="2-团队协作开发成本高"><a href="#2-团队协作开发成本高" class="headerlink" title="2. 团队协作开发成本高"></a>2. 团队协作开发成本高</h2><p>团队成员人数变多后，打包部署，测试阶段只要有一部分出现问题，就需要重新编译打包部署，然后重新预览测试，所有团队成员就要再次参与进来，效率很低，开发成本太高。</p><h2 id="3-系统高可用差"><a href="#3-系统高可用差" class="headerlink" title="3. 系统高可用差"></a>3. 系统高可用差</h2><p>因为所有的功能开发最后都部署到同一个WAR包里，运行在同一个Tomcat进程之中，一旦某一功能涉及的代码或者资源有问题，那就会影响整个WAR包中部署的功能。比如我经常遇到的一个问题，某段代码不断在内存中创建大对象，并且没有回收，部署到线上运行一段时间后，就会造成JVM内存泄露，异常退出，那么部署在同一个JVM进程中的所有服务都不可用，后果十分严重。</p><h2 id="4-线上发布变慢"><a href="#4-线上发布变慢" class="headerlink" title="4. 线上发布变慢"></a>4. 线上发布变慢</h2><p>特别是对于Java应用来说，一旦代码膨胀，服务启动的时间就会变⻓，有些甚至超过10分钟以上，如果机器规模超过100台以上，假设每次发布的步⻓为10%，单次发布需要就需要100分钟之久。因此，急需一种方法能够将应用的不同模块的解耦，降低开发和部署成本。</p><h1 id="2-什么是服务化？什么是微服务？"><a href="#2-什么是服务化？什么是微服务？" class="headerlink" title="2. 什么是服务化？什么是微服务？"></a>2. 什么是服务化？什么是微服务？</h1><blockquote><p>用通俗的话来讲，服务化就是把传统的单机应用中通过JAR包依赖产生的本地方法调用，改造成通过RPC接口产生的远程方法调用。可⻅通过服务化，可以解决单体应用膨胀、团队开发耦合度高、协作效率低下的问题。</p></blockquote><p>2014年，得益于以Docker为代表的容器化技术成熟和Devops兴起，服务化思想进一步发展，发展至如今的微服务。</p><h1 id="3-微服务与服务化有什么不同？"><a href="#3-微服务与服务化有什么不同？" class="headerlink" title="3. 微服务与服务化有什么不同？"></a>3. 微服务与服务化有什么不同？</h1><p>可以总结为以下四点: </p><ul><li><p><strong>服务拆分粒度更细。</strong>微服务可以说是更细维度的服务化，小到一个子模块，只要该模块依赖的资源与其他模块都没有关 系，那么就可以拆分为一个微服务。 </p></li><li><p><strong>服务独立部署。</strong>每个微服务都严格遵循独立打包部署的准则，互不影响。比如一台物理机上可以部署多个Docker实例，每 个Docker实例可以部署一个微服务的代码。 </p></li><li><p><strong>服务独立维护。</strong>每个微服务都可以交由一个小团队甚至个人来开发、测试、发布和运维，并对整个生命周期负责。</p></li><li><p><strong>服务治理能力要求高。</strong>因为拆分为微服务之后，服务的数量变多，因此需要有统一的服务治理平台，来对各个服务进行管理。 </p></li></ul><h1 id="4-微服务架构组成"><a href="#4-微服务架构组成" class="headerlink" title="4. 微服务架构组成"></a>4. 微服务架构组成</h1><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-070352.jpg" alt></p><p>首先服务提供者（就是提供服务的一方）按照一定格式的服务描述，向注册中心注册服务，声明自己能够提供哪些服务以及服务的地址是什么，完成服务发布。</p><p>接下来服务消费者（就是调用服务的一方）请求注册中心，查询所需要调用服务的地址，然后以约定的通信协议向服务提供者发起请求，得到请求结果后再按照约定的协议解析结果。</p><p>而且在服务的调用过程中，服务的请求耗时、调用量以及成功率等指标都会被记录下来用作监控，调用经过的链路信息会被记录下来，用于故障定位和问题追踪。在这期间，如果调用失败，可以通过重试等服务治理手段来保证成功率。</p><p>服务调用主要依赖的基本组件：</p><ul><li><p>服务描述</p><p>（服务调用首先要解决的问题就是服务如何对外描述。比如，你对外提供了一个服务，那么这个服务的服务名叫什么？调用这个服务需要提供哪些信息？调用这个服务返回的结果是什么格式的？该如何解析？这些就是服务描述要解决的问题。常用的服务描述方式包括 RESTful API、XML 配置以及 IDL 文件三种。）</p></li><li><p>注册中心</p><p>（有了服务的接口描述，下一步要解决的问题就是服务的发布和订阅，就是说你提供了一个服务，如何让外部想调用你的服务的人知道。这个时候就需要一个类似注册中心的角色，服务提供者将自己提供的服务以及地址登记到注册中心，服务消费者则从注册中心查询所需要调用的服务的地址，然后发起请求。</p><p>一般来讲，注册中心的工作流程是：</p><ul><li>服务提供者在启动时，根据服务发布文件中配置的发布信息向注册中心注册自己的服务。</li><li>服务消费者在启动时，根据消费者配置文件中配置的服务信息向注册中心订阅自己所需要的服务。</li><li>注册中心返回服务提供者地址列表给服务消费者。</li><li>当服务提供者发生变化，比如有节点新增或者销毁，注册中心将变更通知给服务消费者。</li></ul><p>）</p></li><li><p>服务框架</p><p>（通过注册中心，服务消费者就可以获取到服务提供者的地址，有了地址后就可以发起调用。但在发起调用之前你还需要解决以下几个问题。</p><ul><li>服务通信采用什么协议？就是说服务提供者和服务消费者之间以什么样的协议进行网络通信，是采用四层 TCP、UDP 协议，还是采用七层 HTTP 协议，还是采用其他协议？</li><li>数据传输采用什么方式？就是说服务提供者和服务消费者之间的数据传输采用哪种方式，是同步还是异步，是在单连接上传输，还是多路复用。</li><li>数据压缩采用什么格式？通常数据传输都会对数据进行压缩，来减少网络传输的数据量，从而减少带宽消耗和网络传输时间，比如常见的 JSON 序列化、Java 对象序列化以及 Protobuf 序列化等。</li></ul><p>）</p></li><li><p>服务监控</p><p>（一旦服务消费者与服务提供者之间能够正常发起服务调用，你就需要对调用情况进行监控，以了解服务是否正常。通常来讲，服务监控主要包括三个流程。</p><ul><li>指标收集。就是要把每一次服务调用的请求耗时以及成功与否收集起来，并上传到集中的数据处理中心。</li><li>数据处理。有了每次调用的请求耗时以及成功与否等信息，就可以计算每秒服务请求量、平均耗时以及成功率等指标。</li><li>数据展示。数据收集起来，经过处理之后，还需要以友好的方式对外展示，才能发挥价值。通常都是将数据展示在 Dashboard 面板上，并且每隔 10s 等间隔自动刷新，用作业务监控和报警等。</li></ul><p>）</p></li><li><p>服务追踪</p><p>（除了需要对服务调用情况进行监控之外，你还需要记录服务调用经过的每一层链路，以便进行问题追踪和故障定位。</p><p>服务追踪的工作原理大致如下：</p><ul><li>服务消费者发起调用前，会在本地按照一定的规则生成一个 requestid，发起调用时，将 requestid 当作请求参数的一部分，传递给服务提供者。</li><li>服务提供者接收到请求后，记录下这次请求的 requestid，然后处理请求。如果服务提供者继续请求其他服务，会在本地再生成一个自己的 requestid，然后把这两个 requestid 都当作请求参数继续往下传递。</li></ul><p>以此类推，通过这种层层往下传递的方式，一次请求，无论最后依赖多少次服务调用、经过多少服务节点，都可以通过最开始生成的 requestid 串联所有节点，从而达到服务追踪的目的。）</p></li><li><p>服务治理</p><p>（服务监控能够发现问题，服务追踪能够定位问题所在，而解决问题就得靠服务治理了。服务治理就是通过一系列的手段来保证在各种意外情况下，服务调用仍然能够正常进行。</p><p>在生产环境中，你应该经常会遇到下面几种状况。</p><ul><li>单机故障。通常遇到单机故障，都是靠运维发现并重启服务或者从线上摘除故障节点。然而集群的规模越大，越是容易遇到单机故障，在机器规模超过一百台以上时，靠传统的人肉运维显然难以应对。而服务治理可以通过一定的策略，自动摘除故障节点，不需要人为干预，就能保证单机故障不会影响业务。</li><li>单 IDC 故障。你应该经常听说某某 App，因为施工挖断光缆导致大批量用户无法使用的严重故障。而服务治理可以通过自动切换故障 IDC 的流量到其他正常 IDC，可以避免因为单 IDC 故障引起的大批量业务受影响。</li><li>依赖服务不可用。比如你的服务依赖依赖了另一个服务，当另一个服务出现问题时，会拖慢甚至拖垮你的服务。而服务治理可以通过限流，在依赖服务异常的情况下，一段时期内停止发起调用而直接返回。这样一方面保证了服务消费者能够不被拖垮，另一方面也给服务提供者减少压力，使其能够尽快恢复。</li></ul><p>上面是三种最常见的需要引入服务治理的场景，当然还有一些其他服务治理的手段比如自动扩缩容，可以用来解决服务的容量问题。）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章根据胡老师讲解，针对微服务学习进行梳理交流学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://wangyuehan.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>聊聊品牌——耐克（一）</title>
    <link href="http://wangyuehan.github.io/year/05/28/%E8%80%90%E5%85%8B/"/>
    <id>http://wangyuehan.github.io/year/05/28/耐克/</id>
    <published>2019-05-28T02:04:38.000Z</published>
    <updated>2019-05-28T05:32:16.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-Nike.jpg" alt></p><p>这两天因为潍坊天气热，脚上穿的airmax720实在热得不行，想买个nike zoom fl蝉翼穿穿凉爽下，突然想写篇文章，来说说下耐克这家公司。</p><a id="more"></a><h1 id="1-耐克的地位"><a href="#1-耐克的地位" class="headerlink" title="1. 耐克的地位"></a>1. 耐克的地位</h1><p>截至目前，耐克市值是1291.35亿，而第二大运动品牌阿迪达斯市值才148.16亿。</p><p>再说另一个品牌LV，它的母公司是LVMH，市值1000亿美元，但是LVMH旗下有迪奥、纪梵希等等50多个品牌。也就是说，这50多个品牌加起来的价值才和耐克差不多。</p><h1 id="2-耐克的前身"><a href="#2-耐克的前身" class="headerlink" title="2. 耐克的前身"></a>2. 耐克的前身</h1><p>其实在耐克公司生涯中，八年中都算半家日本公司。在创业初期的八年里，并没有耐克这个品牌，公司的名字叫”蓝带体育公司”，那时候蓝带体育主要是代理日本运动鞋在美国售卖，而那家日本公司也是现今鼎鼎大名的鬼冢公司。</p><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-044149.jpg" alt></p><h1 id="3-耐克创始人-菲尔·奈特"><a href="#3-耐克创始人-菲尔·奈特" class="headerlink" title="3. 耐克创始人-菲尔·奈特"></a>3. 耐克创始人-菲尔·奈特</h1><p>菲尔·奈特，1938年生，现在81岁了，在耐克公司CEO的位置上工作了长达51年，直到2015年退休，可以说是耐克的灵魂人物。那时候的奈特只是一个24岁的商学院毕业生。同很多颇负盛名的创业公司老板一样，个人性格和品牌定位呈现两极化，耐克一直给消费者的感觉就是积极向上，运动活力，充满能量，但是菲尔·奈特确实个腼腆羞涩的人，24岁的时候还从没交过女朋友。看下图，奈特老爷子的儿子长得就很帅气，可推断老爷子年轻时候真的也不赖。😂</p><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-045618.jpg" alt></p><p>菲尔·奈特学生时代就是长跑队的运动员，对于跑鞋有着强大的兴趣，这也为了以后耐克在运动鞋的贡献和地位定好了方向。</p><p>上世纪60年代，全世界最好的运动鞋首先是德国，最大的运动鞋公司是阿迪达斯，同时，作为全民跑步爱好者国度的日本，自然也少不了本土优秀的运动鞋品牌，而菲尔·奈特当时就想引进日本跑鞋到美国市场上去卖。</p><p>到了日本，奈特相中了鬼冢公司的跑鞋，在日本是卖的火爆，奈特当即给日本鬼冢虎公司总部打了电话，日本听说是美国商人想引进日本鞋子，本着开拓市场，就友善的接待了菲尔·奈特。</p><p><img src="http://prj8y63ca.bkt.clouddn.com/2019-05-28-050055.jpg" alt></p><p>到了公司，参观了下，喝了喝下午茶，鬼冢虎公司一个高管觉得到了差不多该谈谈生意的时候了，就问菲尔·奈特是就职于哪家公司。</p><p>但是当时的菲尔·奈特只是个刚毕业的大学生，这时候本来腼腆的奈特就紧张起来了，危机时刻，突然想到自己父母的家里，自己的卧室中贴满了自己在大学田径比赛得到的蓝丝带，就脱口而出，”我代表来自俄勒冈州波特兰市的蓝带体育公司，先生。”</p><p>因为互联网不发达，鬼冢虎高管们也不知道有没有这家公司，加之上世纪60年代日本处于二战经济复苏时期，需要扩展市场，就相信了奈特，当即给了奈特代理权。</p><p>之后，在1963年，菲尔·奈特和他的导师比尔·鲍尔曼共同创立了一家名为”蓝带体育用品公司”(Blue Ribbon Sports)的公司，主营体育用品。1964年，奈特与他的教练鲍尔曼各出资500美元，成立了运动鞋公司，取名为蓝带体育用品公司。</p><p>后来，鬼冢虎公司觉得奈特还真的在美国西海岸卖的真不错，希望找其他代理商在东海岸也卖卖，奈特当即表示，东海岸没问题，我们全国各地都有代理商办事处。实际上是，根本就没有。。。。。</p><p>但是鬼冢虎公司还是相信了奈特，在代理鬼冢虎的过程中，奈特自己组织的团队对于跑鞋的研究也是与日俱增，免费提供给鬼冢虎公司很多技术上的改进，而鬼冢虎公司是越发害怕这个年轻人发展的太壮大，威胁到自己，所以到了1971年，鬼冢虎公司要收购蓝带体育51%股权，菲尔·奈特不愿妥协，最后奈特决定单干。</p><p>1972年，NIKE公司正式成立。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://prj8y63ca.bkt.clouddn.com/2019-05-28-Nike.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这两天因为潍坊天气热，脚上穿的airmax720实在热得不行，想买个nike zoom fl蝉翼穿穿凉爽下，突然想写篇文章，来说说下耐克这家公司。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://wangyuehan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://wangyuehan.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>万象优图鉴别XX图片</title>
    <link href="http://wangyuehan.github.io/year/05/21/%E4%B8%87%E8%B1%A1%E4%BC%98%E5%9B%BE%E9%89%B4%E5%88%ABXX%E5%9B%BE%E7%89%87/"/>
    <id>http://wangyuehan.github.io/year/05/21/万象优图鉴别XX图片/</id>
    <published>2019-05-21T02:13:48.000Z</published>
    <updated>2019-05-21T02:21:44.038Z</updated>
    
    <content type="html"><![CDATA[<p>据说准确率高达99.95%，基本可以替代人工审核，那么借着腾讯云免费服务器体验名额，来试试下嘿嘿～～</p><p>据腾讯介绍说，这是一项基于腾讯优图独创的基于深度学习的图片鉴黄技术，承载每天数亿张qq相册的识别业务，也可以说是相当厉害了</p><a id="more"></a><p>先来看一下腾讯介绍：</p><p>##智能鉴黄简介</p><p>智能鉴黄（Porn Identification）是基于腾讯优图的深度学习图像识别技术，通过学习和分析图片影像的肤色、姿态和场景等，让机器替代人工进行图像审核。支持提供图片文件或者下载地址，自动获取图片进行智能识别，并返回图片的色情分值，可高效识别色情图片和性感图片，准确率高达99.95%。对于高置信度图片可直接打击，对于次高置信度图片可按优先级交付人工审核确认，有效帮助企业规避业务涉黄风险，为您解放审核人力，节省业务支出。 </p><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>使用万象优图图片鉴黄 API 接口，我们需要先完成以下步骤：</p><ul><li>获取腾讯云账号 APP ID</li><li>配置云 API 公钥/密钥</li><li>配置优图 bucket</li></ul><p>首先在终端执行以下命令，创建目录 <code>/data/try-pi</code>，然后进入到该目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/try-pi &amp;&amp; cd $_</span><br></pre></td></tr></table></figure><p>然后在目录 <code>/data/try-pi</code> 下<em>创建 init.sh 文件</em>，在文件中贴入以下脚本：</p><h5 id="示例代码：-data-try-pi-init-sh"><a href="#示例代码：-data-try-pi-init-sh" class="headerlink" title="示例代码：/data/try-pi/init.sh"></a>示例代码：/data/try-pi/init.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># 基础配置</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯云账号 APP ID</span></span><br><span class="line"><span class="comment"># 在如下单引号内填入你的 APPID</span></span><br><span class="line"><span class="built_in">export</span> APP_ID=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 云 API 公钥</span></span><br><span class="line"><span class="comment"># 在如单引号内填入你的 SecretID</span></span><br><span class="line"><span class="built_in">export</span> SECRET_ID=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 云 API 密钥</span></span><br><span class="line"><span class="comment"># 在如下单引号内填入你的 SecretKey</span></span><br><span class="line"><span class="built_in">export</span> SECRET_KEY=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优图 bucket 名称</span></span><br><span class="line"><span class="comment"># 如果你创建的 bucket 名称不叫 trial，替换为自己创建的即可</span></span><br><span class="line"><span class="built_in">export</span> BUCKET_NAME=<span class="string">'trial'</span></span><br></pre></td></tr></table></figure><p>可以看到配置文件中要求我们填入以下信息：</p><ul><li>腾讯云账号 APP ID</li><li>云 API 公钥/密钥</li><li>优图 bucket 名称</li></ul><p>其中，<code>腾讯云账号 APP ID</code> 及 <code>云 API 公钥/密钥</code> 可以<a href="https://console.qcloud.com/capi" target="_blank" rel="noopener">点击这里</a>前往腾讯云控制台 <code>云 API 密钥 - 个人 API 密钥</code> 页面查看。</p><p>如果你还没有创建过密钥，可以在该页面点击 <code>+新建密钥</code> 按钮创建一个，然后将对应信息填入到 <code>init.sh</code>文件中，按键 [<a href="https://cloud.tencent.com/developer/labs/lab/10071#stage-1-step-2-save-init" target="_blank" rel="noopener">Ctrl + S</a>] 进行保存。</p><p><a href="https://console.qcloud.com/ci/bucket" target="_blank" rel="noopener">点击这里</a>前往腾讯云控制台 <code>万象优图 - Bucket管理</code> 页面创建一个名称为 <code>trial</code>，其他选项默认即可。</p><blockquote><p>Mac 用户请按键盘 <code>Cmd + S</code> 进行保存</p></blockquote><h3 id="将配置项导出为环境变量"><a href="#将配置项导出为环境变量" class="headerlink" title="将配置项导出为环境变量"></a>将配置项导出为环境变量</h3><p>在终端中执行以下命令，将各配置项导出为 Shell 环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source init.sh</span><br></pre></td></tr></table></figure><p>可以通过以下命令来验证各配置项是否已正常导出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo $APP_ID</span><br><span class="line">echo $SECRET_ID</span><br><span class="line">echo $SECRET_KEY</span><br><span class="line">echo $BUCKET_NAME</span><br></pre></td></tr></table></figure><h2 id="生成鉴权签名"><a href="#生成鉴权签名" class="headerlink" title="生成鉴权签名"></a>生成鉴权签名</h2><blockquote><p>任务时间：5min ~ 10min</p></blockquote><h3 id="新建脚本生成签名"><a href="#新建脚本生成签名" class="headerlink" title="新建脚本生成签名"></a>新建脚本生成签名</h3><p>基础配置完成后，我们在此基础上还需生成[<a href="https://cloud.tencent.com/developer/labs/lab/10071#stage-2-step-1-about-auth-sign" target="_blank" rel="noopener">鉴权签名</a>]，因为调用万象优图 API 接口需要用到它。我们将创建脚本来生成有效期为 30 天的多次有效的签名。</p><p>在目录 <code>/data/try-pi</code> 下<em>创建 gen-sign.sh 文件</em>，然后在文件中贴入以下脚本：</p><h5 id="示例代码：-data-try-pi-gen-sign-sh"><a href="#示例代码：-data-try-pi-gen-sign-sh" class="headerlink" title="示例代码：/data/try-pi/gen-sign.sh"></a>示例代码：/data/try-pi/gen-sign.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># 生成多次有效的鉴权签名（有效期 30 天） </span></span><br><span class="line"><span class="comment"># @see https://cloud.tencent.com/document/product/460/6968</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间戳（秒）</span></span><br><span class="line">current_time=$(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到期时间戳（秒）</span></span><br><span class="line">expire_time=$((<span class="variable">$current_time</span> + 30 * 24 * 60 * 60))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机串，无符号 10 进制整数（不大于 10 位）</span></span><br><span class="line">rand=<span class="string">'4815162342'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 历史遗留字段，写死为 0</span></span><br><span class="line">user_id=<span class="string">'0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接签名串</span></span><br><span class="line">str=<span class="string">"a=<span class="variable">$APP_ID</span>&amp;b=<span class="variable">$BUCKET_NAME</span>&amp;k=<span class="variable">$SECRET_ID</span>&amp;e=<span class="variable">$expire_time</span>&amp;t=<span class="variable">$current_time</span>&amp;r=<span class="variable">$rand</span>&amp;u=<span class="variable">$user_id</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 HMAC-SHA1 算法对签名串加密</span></span><br><span class="line">sign=$(<span class="built_in">echo</span> -n <span class="variable">$str</span> | openssl dgst -sha1 -hmac <span class="variable">$SECRET_KEY</span> -binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对加密串进行 Base64 编码</span></span><br><span class="line">sign=$(<span class="built_in">echo</span> -n <span class="variable">$sign</span><span class="variable">$str</span> | base64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除多余的空格得到最终的鉴权签名</span></span><br><span class="line">sign=$(<span class="built_in">echo</span> -n <span class="variable">$sign</span> | tr -d <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出鉴权签名</span></span><br><span class="line"><span class="built_in">export</span> AUTH_SIGN=<span class="variable">$sign</span></span><br></pre></td></tr></table></figure><blockquote><p>关于签名鉴权的详细介绍和生成方法可移步<a href="https://cloud.tencent.com/document/product/460/6968" target="_blank" rel="noopener">这里</a></p></blockquote><h3 id="将签名导出为环境变量"><a href="#将签名导出为环境变量" class="headerlink" title="将签名导出为环境变量"></a>将签名导出为环境变量</h3><p>在终端中[<a href="https://cloud.tencent.com/developer/labs/lab/10071#stage-2-step-2-gen-sign-bonus" target="_blank" rel="noopener">执行以下命令</a>]，生成签名并将签名导出为环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source gen-sign.sh</span><br></pre></td></tr></table></figure><p>可以通过以下命令来验证签名是否已正常导出 [<a href="https://cloud.tencent.com/developer/labs/lab/10071#stage-2-step-2-icon" target="_blank" rel="noopener">?</a>]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $AUTH_SIGN</span><br></pre></td></tr></table></figure><blockquote><p>该命令可多次执行，每次执行都会生成新的签名并将签名导出为环境变量</p></blockquote><blockquote><p>签名应该是一串经过 Base64 的字符串</p></blockquote><h2 id="体验智能鉴黄"><a href="#体验智能鉴黄" class="headerlink" title="体验智能鉴黄"></a>体验智能鉴黄</h2><blockquote><p>任务时间：20min ~ 30min</p></blockquote><h3 id="准备鉴黄脚本"><a href="#准备鉴黄脚本" class="headerlink" title="准备鉴黄脚本"></a>准备鉴黄脚本</h3><p>仍旧在目录 <code>/data/try-pi</code> 下<em>创建 detect-porn.sh 文件</em>，然后在文件中贴入以下脚本：</p><h5 id="示例代码：-data-try-pi-detect-porn-sh"><a href="#示例代码：-data-try-pi-detect-porn-sh" class="headerlink" title="示例代码：/data/try-pi/detect-porn.sh"></a>示例代码：/data/try-pi/detect-porn.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># 鉴黄脚本</span></span><br><span class="line"><span class="comment"># @see https://cloud.tencent.com/document/product/460/6900</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片鉴黄 API 地址</span></span><br><span class="line">END_POINT=<span class="string">'https://service.image.myqcloud.com/detection/porn_detect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用帮助</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"-h --help"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"-r --remote-image=网络图片地址"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"-l --local-image=本地图片地址"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对网络图片进行鉴黄</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">detect_remote</span></span>() &#123;</span><br><span class="line">  remote_image=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">  curl -X POST \</span><br><span class="line">       -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">       -H <span class="string">"Authorization: <span class="variable">$AUTH_SIGN</span>"</span> \</span><br><span class="line">       -d <span class="string">'&#123;"appid":'</span><span class="variable">$APP_ID</span><span class="string">',"bucket":"'</span><span class="variable">$BUCKET_NAME</span><span class="string">'","url_list":["'</span><span class="variable">$remote_image</span><span class="string">'"]&#125;'</span> \</span><br><span class="line">       --silent \</span><br><span class="line">       <span class="variable">$END_POINT</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对本地图片进行鉴黄</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">detect_local</span></span>() &#123;</span><br><span class="line">  local_image=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">  curl -X POST \</span><br><span class="line">       -H <span class="string">"Content-Type: multipart/form-data"</span> \</span><br><span class="line">       -H <span class="string">"Authorization: <span class="variable">$AUTH_SIGN</span>"</span> \</span><br><span class="line">       -F <span class="string">"appid=<span class="variable">$APP_ID</span>"</span> \</span><br><span class="line">       -F <span class="string">"bucket=<span class="variable">$BUCKET_NAME</span>"</span> \</span><br><span class="line">       -F <span class="string">"image[0]=@<span class="variable">$local_image</span>"</span> \</span><br><span class="line">       --silent \</span><br><span class="line">       <span class="variable">$END_POINT</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析命令入参</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$1</span>"</span> != <span class="string">""</span> ]; <span class="keyword">do</span></span><br><span class="line">  PARAM=`<span class="built_in">echo</span> <span class="variable">$1</span> | awk -F= <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">  VALUE=`<span class="built_in">echo</span> <span class="variable">$1</span> | awk -F= <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$PARAM</span> <span class="keyword">in</span></span><br><span class="line">    -h | --<span class="built_in">help</span>)</span><br><span class="line">      usage</span><br><span class="line">      <span class="built_in">exit</span></span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    -r | --remote-image)</span><br><span class="line">      detect_remote <span class="variable">$VALUE</span></span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    -l | --<span class="built_in">local</span>-image)</span><br><span class="line">      detect_local <span class="variable">$VALUE</span></span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"ERROR: 未知参数 \"<span class="variable">$PARAM</span>\""</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在终端中敲入以下命令查看鉴黄脚本使用说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash detect-porn.sh -h</span><br></pre></td></tr></table></figure><p>鉴黄脚本是对<a href="https://cloud.tencent.com/document/product/460/6900" target="_blank" rel="noopener">万象优图图片鉴黄 API 接口</a>的实践。可以看到，我们的脚本支持对 <code>网络图片</code> 和 <code>本地图片</code>进行鉴黄。</p><h3 id="对网络图片进行鉴黄"><a href="#对网络图片进行鉴黄" class="headerlink" title="对网络图片进行鉴黄"></a>对网络图片进行鉴黄</h3><p>在终端执行以下命令，可以看到对网络图片的鉴黄结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash detect-porn.sh --remote-image=&apos;https://imgcache.qq.com/open_proj/proj_qcloud_v2/gateway/event/pc/ci-identify/css/img/demo/demo_8.jpg&apos;</span><br></pre></td></tr></table></figure><p>输出结果应该是一段 JSON 字符串，<a href="https://cloud.tencent.com/document/product/460/6900#3.2-.E8.BF.94.E5.9B.9E.E5.86.85.E5.AE.B9" target="_blank" rel="noopener">点击这里</a>可以查看输出结果各字段的含义。</p><h3 id="对本地图片进行鉴黄"><a href="#对本地图片进行鉴黄" class="headerlink" title="对本地图片进行鉴黄"></a>对本地图片进行鉴黄</h3><p>在终端执行执行以下命令，将网络图片下载到云主机 <code>/data/try-pi</code> 目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://imgcache.qq.com/open_proj/proj_qcloud_v2/gateway/event/pc/ci-identify/css/img/demo/demo_10.jpg -O /data/try-pi/demo.jpg</span><br></pre></td></tr></table></figure><p>下载完成后，右键刷新 <code>/data/try-pi</code> 目录，可以看到在该目录下新增了一个名为 <code>demo.jpg</code> 的图片，点击可预览该图片。</p><p>接下来，在终端执行以下命令，可以看到对该图片的鉴黄结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash detect-porn.sh --local-image=&apos;/data/try-pi/demo.jpg&apos;</span><br></pre></td></tr></table></figure><p>输出结果应该是一段 JSON 字符串，<a href="https://cloud.tencent.com/document/product/460/6900#4.2-.E8.BF.94.E5.9B.9E.E5.86.85.E5.AE.B9" target="_blank" rel="noopener">点击这里</a>可以查看输出结果各字段的含义。</p><p>当然，你也可以根据上述步骤，替换为自己准备的图片进行鉴黄体验。</p><h3 id="完成实验"><a href="#完成实验" class="headerlink" title="完成实验"></a>完成实验</h3><p>Well done！通过本实验，我们了解了如何使用图片鉴黄 API 接口（包括生成 API 密钥、创建优图 bucket、生成鉴权签名），以及如何使用接口对网络图片和本地图片进行鉴黄。</p><p>经过本人测试，此篇教程可以完成。本教程转自腾讯云，可以免费体验测试哦～～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据说准确率高达99.95%，基本可以替代人工审核，那么借着腾讯云免费服务器体验名额，来试试下嘿嘿～～&lt;/p&gt;
&lt;p&gt;据腾讯介绍说，这是一项基于腾讯优图独创的基于深度学习的图片鉴黄技术，承载每天数亿张qq相册的识别业务，也可以说是相当厉害了&lt;/p&gt;
    
    </summary>
    
    
      <category term="api" scheme="http://wangyuehan.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建wordpress</title>
    <link href="http://wangyuehan.github.io/year/05/21/centos%E6%90%AD%E5%BB%BAwordpress/"/>
    <id>http://wangyuehan.github.io/year/05/21/centos搭建wordpress/</id>
    <published>2019-05-21T02:00:06.000Z</published>
    <updated>2019-05-21T02:06:06.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yuehanimage.test.upcdn.net/blog/2019-05-21-020208.jpg" alt></p><a id="more"></a><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>使用 <code>yum</code> 安装 Nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><p>修改 <em>/etc/nginx/conf.d/default.conf</em>，去除对 IPv6 地址的监听[<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-1-step-1-ipv6" target="_blank" rel="noopener">?</a>]，可参考下面的示例：</p><h5 id="示例代码：-etc-nginx-conf-d-default-conf"><a href="#示例代码：-etc-nginx-conf-d-default-conf" class="headerlink" title="示例代码：/etc/nginx/conf.d/default.conf"></a>示例代码：/etc/nginx/conf.d/default.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    # listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，启动 Nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>此时，可访问实验机器外网 HTTP 服务（<a href="http://&lt;您的 CVM IP 地址" target="_blank" rel="noopener">http://&lt;您的 CVM IP 地址&gt;</a>）来确认是否已经安装成功。</p><p>将 Nginx 设置为开机自动启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure><blockquote><p>CentOS 6 不支持 IPv6，需要取消对 IPv6 地址的监听，否则 Nginx 不能成功启动。</p></blockquote><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>使用 <code>yum</code> 安装 MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server -y</span><br></pre></td></tr></table></figure><p>安装完成后，启动 MySQL 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>设置 MySQL 账户 root 密码：[<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-1-step-2-password" target="_blank" rel="noopener">?</a>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password &apos;MyPas$word4Word_Press&apos;</span><br></pre></td></tr></table></figure><p>将 MySQL 设置为开机自动启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure><blockquote><p>下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住，在后续的步骤会使用到。</p></blockquote><h3 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h3><p>使用 <code>yum</code> 安装 PHP：[<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-1-step-3-php" target="_blank" rel="noopener">?</a>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php-fpm php-mysql -y</span><br></pre></td></tr></table></figure><p>安装之后，启动 PHP-FPM 进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm start</span><br></pre></td></tr></table></figure><p>启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 [<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-1-step-3-port" target="_blank" rel="noopener">?</a>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlpt | grep php-fpm</span><br></pre></td></tr></table></figure><p>把 PHP-FPM 也设置成开机自动启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure><blockquote><p>CentOs 6 默认已经安装了 PHP-FPM 及 PHP-MYSQL，下面命令执行的可能会提示已经安装。</p></blockquote><blockquote><p>PHP-FPM 默认监听 9000 端口</p></blockquote><h2 id="安装并配置-WordPress"><a href="#安装并配置-WordPress" class="headerlink" title="安装并配置 WordPress"></a>安装并配置 WordPress</h2><blockquote><p>任务时间：30min ~ 60min</p></blockquote><h3 id="安装-WordPress"><a href="#安装-WordPress" class="headerlink" title="安装 WordPress"></a>安装 WordPress</h3><p>配置好 LNMP 环境后，继续使用 <code>yum</code> 来安装 WordPress：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wordpress -y</span><br></pre></td></tr></table></figure><p>安装完成后，就可以在 <em>/usr/share/wordpress</em> 看到 WordPress 的源代码了。</p><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>进入 MySQL：[<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-2-step-2-password" target="_blank" rel="noopener">?</a>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot --password=&apos;MyPas$word4Word_Press&apos;</span><br></pre></td></tr></table></figure><p>为 WordPress 创建一个数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE wordpress;</span><br></pre></td></tr></table></figure><p>MySQL 部分设置完了，我们退出 MySQL 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>把上述的 DB 配置<em>同步到 WordPress 的配置</em>文件中，可参考下面的配置：</p><h5 id="示例代码：-etc-wordpress-wp-config-php"><a href="#示例代码：-etc-wordpress-wp-config-php" class="headerlink" title="示例代码：/etc/wordpress/wp-config.php"></a>示例代码：/etc/wordpress/wp-config.php</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The base configuration for WordPress</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The wp-config.php creation script uses this file during the</span></span><br><span class="line"><span class="comment"> * installation. You don't have to use the web site, you can</span></span><br><span class="line"><span class="comment"> * copy this file to "wp-config.php" and fill in the values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file contains the following configurations:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * * MySQL settings</span></span><br><span class="line"><span class="comment"> * * Secret keys</span></span><br><span class="line"><span class="comment"> * * Database table prefix</span></span><br><span class="line"><span class="comment"> * * ABSPATH</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://codex.wordpress.org/Editing_wp-config.php</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> WordPress</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ** MySQL settings - You can get this info from your web host ** //</span></span><br><span class="line"><span class="comment">/** The name of the database for WordPress */</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'wordpress'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line">define(<span class="string">'DB_PASSWORD'</span>, <span class="string">'MyPas$word4Word_Press'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL hostname */</span></span><br><span class="line">define(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Database Charset to use in creating database tables. */</span></span><br><span class="line">define(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The Database Collate type. Don't change this if in doubt. */</span></span><br><span class="line">define(<span class="string">'DB_COLLATE'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**#@+</span></span><br><span class="line"><span class="comment"> * Authentication Unique Keys and Salts.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Change these to different unique phrases!</span></span><br><span class="line"><span class="comment"> * You can generate these using the &#123;<span class="doctag">@link</span> https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</span></span><br><span class="line"><span class="comment"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="string">'AUTH_KEY'</span>,         <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'SECURE_AUTH_KEY'</span>,  <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'LOGGED_IN_KEY'</span>,    <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'NONCE_KEY'</span>,        <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'AUTH_SALT'</span>,        <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'SECURE_AUTH_SALT'</span>, <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'LOGGED_IN_SALT'</span>,   <span class="string">'put your unique phrase here'</span>);</span><br><span class="line">define(<span class="string">'NONCE_SALT'</span>,       <span class="string">'put your unique phrase here'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**#@-*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordPress Database Table prefix.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can have multiple installations in one database if you give each</span></span><br><span class="line"><span class="comment"> * a unique prefix. Only numbers, letters, and underscores please!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$table_prefix  = <span class="string">'wp_'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Disable all file change, as RPM base installation are read-only */</span></span><br><span class="line">define(<span class="string">'DISALLOW_FILE_MODS'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Disable automatic updater, in case you want to allow</span></span><br><span class="line"><span class="comment">   above FILE_MODS for plugins, themes, ... */</span></span><br><span class="line">define(<span class="string">'AUTOMATIC_UPDATER_DISABLED'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For developers: WordPress debugging mode.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Change this to true to enable the display of notices during development.</span></span><br><span class="line"><span class="comment"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</span></span><br><span class="line"><span class="comment"> * in their development environments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For information on other constants that can be used for debugging,</span></span><br><span class="line"><span class="comment"> * visit the Codex.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://codex.wordpress.org/Debugging_in_WordPress</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="string">'WP_DEBUG'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* That's all, stop editing! Happy blogging. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Absolute path to the WordPress directory. */</span></span><br><span class="line"><span class="keyword">if</span> ( !defined(<span class="string">'ABSPATH'</span>) )</span><br><span class="line">    define(<span class="string">'ABSPATH'</span>, <span class="string">'/usr/share/wordpress'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sets up WordPress vars and included files. */</span></span><br><span class="line"><span class="keyword">require_once</span>(ABSPATH . <span class="string">'wp-settings.php'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果你上面的步骤没有使用教程创建的密码，请修改下面命令中的密码登录</p></blockquote><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>WordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理</p><p>首先，重命名默认的配置文件：[<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-2-step-3-rename" target="_blank" rel="noopener">?</a>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d/</span><br><span class="line">mv default.conf defaut.conf.bak</span><br></pre></td></tr></table></figure><p>在 <code>/etc/nginx/conf.d</code> <em>创建 wordpress.conf 配置</em>，参考下面的内容：</p><h5 id="示例代码：-etc-nginx-conf-d-wordpress-conf"><a href="#示例代码：-etc-nginx-conf-d-wordpress-conf" class="headerlink" title="示例代码：/etc/nginx/conf.d/wordpress.conf"></a>示例代码：/etc/nginx/conf.d/wordpress.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /usr/share/wordpress;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.php index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.php index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    location ~ .php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后，通知 Nginx 进程重新加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><blockquote><p>默认的 Server 监听 80 端口，与 WordPress 的服务端口冲突，将其重命名为 .bak 后缀以禁用默认配置</p></blockquote><h2 id="准备域名和解析"><a href="#准备域名和解析" class="headerlink" title="准备域名和解析"></a>准备域名和解析</h2><blockquote><p>任务时间：15min ~ 30min</p></blockquote><h3 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h3><p>如果您还没有域名，可以<a href="https://dnspod.qcloud.com/?fromSource=lab" target="_blank" rel="noopener">在腾讯云上选购</a>，过程可以参考下面的视频。</p><ul><li><em>视频 - 在腾讯云上购买域名</em></li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;您的 CVM IP 地址&gt;</span><br></pre></td></tr></table></figure><p>在腾讯云购买的域名，可以<a href="https://console.qcloud.com/domain" target="_blank" rel="noopener">到控制台添加解析记录</a>，过程可参考下面的视频：</p><ul><li><em>视频 - 如何在腾讯云上解析域名</em></li></ul><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效 [<a href="https://cloud.tencent.com/developer/labs/lab/10001#stage-3-step-2-replace" target="_blank" rel="noopener">?</a>]，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <code>www.yourmpdomain.com</code> 为您自己的注册的域名</p></blockquote><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3><p>恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。</p><p>通过IP地址查看：</p><p>博客访问地址：<a href="http://&lt;您的域名&gt;/wp-admin/install.php" target="_blank" rel="noopener">http://&lt;您的域名&gt;/wp-admin/install.php</a></p><p>通过域名查看：</p><p>博客访问地址：<a href="http://www.yourdomain.com/wp-admin/install.php" target="_blank" rel="noopener">http://www.yourdomain.com/wp-admin/install.php</a>，其中替换 <code>www.yourdomain.com</code>为之前申请的域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yuehanimage.test.upcdn.net/blog/2019-05-21-020208.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="玩物志" scheme="http://wangyuehan.github.io/categories/%E7%8E%A9%E7%89%A9%E5%BF%97/"/>
    
    
      <category term="linux" scheme="http://wangyuehan.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>巴纳姆效应：真实的裂变</title>
    <link href="http://wangyuehan.github.io/year/05/15/%E5%B7%B4%E7%BA%B3%E5%A7%86%E6%95%88%E5%BA%94%EF%BC%9A%E7%9C%9F%E5%AE%9E%E7%9A%84%E8%A3%82%E5%8F%98/"/>
    <id>http://wangyuehan.github.io/year/05/15/巴纳姆效应：真实的裂变/</id>
    <published>2019-05-15T07:11:58.000Z</published>
    <updated>2019-05-15T07:41:46.293Z</updated>
    
    <content type="html"><![CDATA[<p>​    巴纳姆效应（Barnum effect）是1948年由心理学家伯特伦·福勒通过试验证明的一种心理学现象，以杂技师巴纳姆的名字命名。心理学家伯特伦·福勒认为每个人都会很容易相信一个笼统的、一般性的人格描述特别适合他。即使这种描述十分空洞，仍然认为反映了自己的人格面貌，哪怕自己根本不是这种人。</p><p>这在微信很多裂变营销中常见的手法，通过大家测测哪种人来进行裂变营销。</p><a id="more"></a><p><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=f6d7ce3bb9a1cd1111bb7a72d87ba399/f603918fa0ec08fa5f3639ac5aee3d6d55fbda82.jpg" alt="img"></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>心理学家福勒（Bertram Forer）于1948年对学生进行一项人格测验，并根据测验结果分析。试后学生对测验结果与本身特质的契合度评分，0分最低，5分最高。事实上，所有学生得到的“个人分析”都是相同的：</p><p>“你祈求受到他人喜爱却对自己吹毛求疵。虽然人格有些缺陷，大体而言你都有办法弥补。你拥有可观的未开发潜能尚未就你的长处发挥，看似强硬、严格自律的外在掩盖着不安与忧虑的内心。<br>许多时候，你严重地质疑自己是否做了对的事情或正确的决定。你喜欢一定程度的变动并在受限时感到不满。你为自己是独立思想者自豪并且不会接受没有充分证据的言论。但你认为对他人过度坦率是不明智的。<br>有些时候你外向、亲和、充满社会性，有些时候你却内向、谨慎而沉默。你的一些抱负是不切实际的”</p><p>结果平均评分为4.26，在评分之后才揭晓，福勒是从星座与人格关系的描述中搜集出这些内容。从分析报告的描述可见，很多语句是适用于任何人，这些语句后来以巴纳姆命名为巴纳姆语句。</p><p>在巴纳姆效应测试的另一个研究当中，学生们用的是明尼苏达多项人格问卷（MMPI），随后研究者对报告进行了评价。研究者们先写下了学生们个性的正确评估，但却给了学生们两份评估，其中一份是正确的评估和一份是假造的，也就是使用一些模糊的泛泛而谈的评估。在之后，学生们被问他们相信哪一份评估报告最能够切合自身，有超过一半的学生（59%），相对于那一份真实的，选择了那份假的评估报告。</p><h1 id="巴纳姆效应与裂变"><a href="#巴纳姆效应与裂变" class="headerlink" title="巴纳姆效应与裂变"></a>巴纳姆效应与裂变</h1><p>微信中各种测测你是哪种人</p><p>比如知乎和北京师范大学心理学实验室做的人格测试，网易云音乐和第五人格游戏出品的心理测试等等。当然，这是有名的，很多野鸡一样的测试在微信中更多，但是都被微信官方当作诱导分享为由封杀了。</p><blockquote><p>下面推荐读搜狐产品经理许士通文章，拜读学习！</p><p>人人都是产品经理<a href="http://www.woshipm.com/pmd/2299348.html" target="_blank" rel="noopener">http://www.woshipm.com/pmd/2299348.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    巴纳姆效应（Barnum effect）是1948年由心理学家伯特伦·福勒通过试验证明的一种心理学现象，以杂技师巴纳姆的名字命名。心理学家伯特伦·福勒认为每个人都会很容易相信一个笼统的、一般性的人格描述特别适合他。即使这种描述十分空洞，仍然认为反映了自己的人格面貌，哪怕自己根本不是这种人。&lt;/p&gt;
&lt;p&gt;这在微信很多裂变营销中常见的手法，通过大家测测哪种人来进行裂变营销。&lt;/p&gt;
    
    </summary>
    
      <category term="心理学" scheme="http://wangyuehan.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
      <category term="心理学" scheme="http://wangyuehan.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>鸟笼效应</title>
    <link href="http://wangyuehan.github.io/year/05/14/%E9%B8%9F%E7%AC%BC%E6%95%88%E5%BA%94/"/>
    <id>http://wangyuehan.github.io/year/05/14/鸟笼效应/</id>
    <published>2019-05-14T10:59:55.000Z</published>
    <updated>2019-05-14T11:22:16.028Z</updated>
    
    <content type="html"><![CDATA[<p>发觉这个心理学典型日常应用是因为，这几天没事的时候（失眠的时候）在想一个问题，很多app凭借靓丽的UI和交互，或者各大up主的安利而下载后，那么怎么让用户在享受免费的下载的同时再掏钱呢，那就是各种内购项目。</p><p>比如各大美图软件，免费下载此app后，在app内的商店中你会发现很多内购专业滤镜包，这些滤镜包都是专业的摄影师调好的，拿来即用，真的是方便快捷又显得自己拍出的照片专业。</p><p>这个时候你是买还是不买呢？自己调，学习成本较高，而且内购的滤镜包也并不是那么贵，不买，那么这么多人说好的软件在自己手中岂不是一点用也没有？</p><p>这就是典型的鸟笼逻辑。</p><a id="more"></a><blockquote><p>鸟笼逻辑来源于一个故事。甲对乙说：“如果我送你一只鸟笼，并且挂在你家中最显眼的地方，我保证你过不了多久就会去买一只鸟回来。”乙不以为然地说：“养只鸟多麻烦啊，我是不会去做这种傻事的。”于是，甲就去买了一只漂亮的鸟笼挂在乙的家中。接下来，只要有人看见那只鸟笼，就会问乙：“你的鸟</p><p><a href="https://baike.baidu.com/pic/鸟笼逻辑/7380371/0/0db52fad7261d3344a36d669?fr=lemma&amp;ct=single" target="_blank" rel="noopener"><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=db5e523e918fa0ec7bc7630f1696594a/b7003af33a87e9508ca4636110385343fbf2b408.jpg" alt="鸟笼逻辑"></a>鸟笼逻辑</p><p>什么时候死的，为什么死了啊？”不管乙怎么解释，客人还是很奇怪，如果不养鸟，挂个鸟笼干什么。最后人们开始怀疑乙的脑子是不是出了问题，乙只好去买了一只鸟放进鸟笼里，这样比无休止地向大家解释要简单得多。</p></blockquote><p>鸟笼逻辑的原因很简单：人们绝大部分的时候是采取惯性思维。并不一定每一个漂亮的鸟笼里都应该装上一只鸟，但可惜的是人们总是逃不出这个逻辑的局限。所以可见在生活和工作中培养逻辑思维是多么重要。[不要限制自己的思维，更不要在传统目光的审视下止步不前。敢于挂出一只空鸟笼并能够自然地坚持下去的人，才是有创见、有魄力有主张的人。</p><p>在产品中也是一个被应用广泛的设计点，在设计中植入”鸟笼”，其实是为了出售本应在”鸟笼”中的”鸟”。也就是所谓的“免费是最好的盈利模式”。</p><p>比如，各大滤镜app在其软件中的专业滤镜包，价格不贵，但是很吸引你的注意，相比较更加节约学习成本，也能调出自己满意的滤镜照片。</p><p>再比如，各大手机厂商的出售的新款手机，这里独占ios的iPhone举例，你在买到心爱的iPhone手机后，其实并没有什么新鲜感，其他安卓旗舰有的它也有，这里手机就相当于鸟笼，而相对应适配的软件才是”鸟笼”中的”鸟”。才是体现这款产品的价值来。</p><p>道理很浅显，好的产品均擅长此术，学习下，在此记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发觉这个心理学典型日常应用是因为，这几天没事的时候（失眠的时候）在想一个问题，很多app凭借靓丽的UI和交互，或者各大up主的安利而下载后，那么怎么让用户在享受免费的下载的同时再掏钱呢，那就是各种内购项目。&lt;/p&gt;
&lt;p&gt;比如各大美图软件，免费下载此app后，在app内的商店中你会发现很多内购专业滤镜包，这些滤镜包都是专业的摄影师调好的，拿来即用，真的是方便快捷又显得自己拍出的照片专业。&lt;/p&gt;
&lt;p&gt;这个时候你是买还是不买呢？自己调，学习成本较高，而且内购的滤镜包也并不是那么贵，不买，那么这么多人说好的软件在自己手中岂不是一点用也没有？&lt;/p&gt;
&lt;p&gt;这就是典型的鸟笼逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="心理学" scheme="http://wangyuehan.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
      <category term="心理学" scheme="http://wangyuehan.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>审美的初级阶段</title>
    <link href="http://wangyuehan.github.io/year/05/13/%E5%AE%A1%E7%BE%8E%E7%9A%84%E5%88%9D%E7%BA%A7%E9%98%B6%E6%AE%B5/"/>
    <id>http://wangyuehan.github.io/year/05/13/审美的初级阶段/</id>
    <published>2019-05-13T07:04:01.000Z</published>
    <updated>2019-05-15T06:35:35.196Z</updated>
    
    <content type="html"><![CDATA[<p>关于审美能力的提升，是需要长期积累的过程。</p><p>对于未来，随着年龄的成长，自己有自己独特的审美能力很重要，比如陪女朋友逛街试衣服啊，或者自己挑选搭配的衣服，在没有专业人士的指导下，自己的主观审美就体现的尤为重要。</p><p>当然还有设计师，他们都有自己独特的审美研究系统。</p><p>这篇文章我就集结自己日常对自己有帮助的一些所得，分享给大家。</p><p>​    <a id="more"></a></p><h1 id="1-网站"><a href="#1-网站" class="headerlink" title="1. 网站"></a>1. 网站</h1><p>图片社交平台instagram: <a href="https://www.instagram.com/" target="_blank" rel="noopener">https://www.instagram.com/</a></p><p>全球品牌秀款网站：<a href="https://link.zhihu.com/?target=http%3A//www.vogue.com/fashion-shows" target="_blank" rel="noopener">http://www.vogue.com/fashion-shows</a></p><p>东京时尚服饰网站：<a href="https://link.zhihu.com/?target=http%3A//tokyofashion.com" target="_blank" rel="noopener">http://tokyofashion.com</a></p><p>anothermag潮流网站：<a href="https://link.zhihu.com/?target=http%3A//www.anothermag.com/" target="_blank" rel="noopener">http://www.anothermag.com/</a></p><p>wgsn流行趋势网站：<a href="https://link.zhihu.com/?target=http%3A//www.wgsn.com" target="_blank" rel="noopener">www.wgsn.com</a></p><h1 id="2-电影"><a href="#2-电影" class="headerlink" title="2. 电影"></a>2. 电影</h1><ol><li>布达佩斯大饭店</li><li>蒂芬妮的早餐</li><li>了不起的盖茨比</li><li>绝代艳后</li><li>少年派的奇幻漂流</li><li>指环王</li><li>十面埋伏</li><li>理发师陶德</li><li>一个购物狂的自白</li><li>律政俏佳人</li></ol><h1 id="3-APP设计灵感"><a href="#3-APP设计灵感" class="headerlink" title="3. APP设计灵感"></a>3. APP设计灵感</h1><ol><li>站酷网</li><li>NEXT社区</li><li>Dribbble</li><li>Behance（adobe旗下设计师创意视觉社区）</li><li>Logopond（国外logo展示社区）</li><li>Ello</li><li>lapa（LandingPage落地页收集）</li><li>UIgradients（简洁舒服渐变配色）</li><li>UI中国</li><li>Mesh Gradients</li><li>MyModernMet(视觉创意和艺术爱好者网站)</li><li>Vimeo动画</li><li>大邦创新（创新型用户体验设计公司）</li><li>等等很多</li></ol><h1 id="4-参展"><a href="#4-参展" class="headerlink" title="4. 参展"></a>4. 参展</h1><p>有条件的同学可以多去参加艺术展，对自己很有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于审美能力的提升，是需要长期积累的过程。&lt;/p&gt;
&lt;p&gt;对于未来，随着年龄的成长，自己有自己独特的审美能力很重要，比如陪女朋友逛街试衣服啊，或者自己挑选搭配的衣服，在没有专业人士的指导下，自己的主观审美就体现的尤为重要。&lt;/p&gt;
&lt;p&gt;当然还有设计师，他们都有自己独特的审美研究系统。&lt;/p&gt;
&lt;p&gt;这篇文章我就集结自己日常对自己有帮助的一些所得，分享给大家。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="随笔" scheme="http://wangyuehan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="审美" scheme="http://wangyuehan.github.io/tags/%E5%AE%A1%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>撸猫指南</title>
    <link href="http://wangyuehan.github.io/year/05/10/%E6%92%B8%E7%8C%AB%E6%8C%87%E5%8D%97/"/>
    <id>http://wangyuehan.github.io/year/05/10/撸猫指南/</id>
    <published>2019-05-10T11:37:34.000Z</published>
    <updated>2019-05-11T07:43:02.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2wgm8k3alj31400u04qp.jpg" alt></p><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2wgm2eds4j31400u0e61.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1g2wgm8k3alj31400u04qp.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="撸猫" scheme="http://wangyuehan.github.io/tags/%E6%92%B8%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>小黄鸭调试法</title>
    <link href="http://wangyuehan.github.io/year/05/10/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95/"/>
    <id>http://wangyuehan.github.io/year/05/10/小黄鸭调试法/</id>
    <published>2019-05-10T06:24:46.000Z</published>
    <updated>2019-05-10T11:44:07.635Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小黄鸭调试法</strong>，又称<strong>橡皮鸭调试法</strong>、<strong>黄鸭除虫法</strong>（Rubber Duck Debugging）是可在<a href="https://www.wikiwand.com/zh-hans/软件工程" target="_blank" rel="noopener">软件工程</a>中使用的一种<a href="https://www.wikiwand.com/zh-hans/调试" target="_blank" rel="noopener">调试</a>代码的方法。方法就是在<a href="https://www.wikiwand.com/zh-hans/计算机程序" target="_blank" rel="noopener">程序</a>的调试、除错或测试过程中，操作人耐心地向<a href="https://www.wikiwand.com/zh-hans/小黄鸭" target="_blank" rel="noopener">小黄鸭</a>解释每一行程序的作用，以此来激发灵感与发现矛盾。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2w7hmp4bij30m80ciq3i.jpg" alt></p><a id="more"></a><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2wgjnxvmxj30m80ci74u.jpg" alt></p><h2 id="名称由来"><a href="#名称由来" class="headerlink" title="名称由来"></a>名称由来</h2><p>此概念是参照于一个故事。故事中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码。</p><p>许多程序员都有向别人提问及解释编程问题的经历，而目标甚至可能是完全不懂编程的人。而就在解释的过程中，程序员可能就发觉了问题的解决方案。一边阐述代码的意图，一边观察它实际上的意图并做调试，两者间的任何不协调都会变得更明显，使人更容易发现错误所在。<a href="https://www.wikiwand.com/zh-hans/小黄鸭调试法#citenotecardboarddog2" target="_blank" rel="noopener">[2]</a>如果没有玩具小鸭，操作人也可以向其他任何东西倾诉，比如桌上的<a href="https://www.wikiwand.com/zh-hans/盆栽" target="_blank" rel="noopener">盆栽</a>、<a href="https://www.wikiwand.com/zh-hans/键盘" target="_blank" rel="noopener">键盘</a>及<a href="https://www.wikiwand.com/zh-hans/鼠标" target="_blank" rel="noopener">鼠标</a>等。</p><h2 id="流行文化"><a href="#流行文化" class="headerlink" title="流行文化"></a>流行文化</h2><p>2018年4月1日<a href="https://www.wikiwand.com/zh-hans/愚人节" target="_blank" rel="noopener">愚人节</a>当天，问答网站<a href="https://www.wikiwand.com/zh-hans/Stack_Exchange" target="_blank" rel="noopener">Stack Exchange</a>推出了名为“呱呱叫溢出”的功能：一个小黄鸭形象会从网页右下方冒出来，它会倾听使用者的想法，并尝试给出解决方案。实际上，这个小黄鸭形象会看起来在思考并且尝试以文字回应，但最后只会以“呱呱”（quack quack）的叫声来回应使用者。Stack Exchange宣称这一功能与小黄鸭调试法有关。<a href="https://www.wikiwand.com/zh-hans/小黄鸭调试法#citenote3" target="_blank" rel="noopener">[3]</a>不过一些用户在看到这个小黄鸭形象时，以为是恶意软件的结果，没有意识到这是一个愚人节玩笑。</p><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><ul><li><a href="https://www.wikiwand.com/zh-hans/代码审查" target="_blank" rel="noopener">代码审查</a></li><li><a href="https://www.wikiwand.com/zh-hans/结对编程" target="_blank" rel="noopener">结对编程</a></li><li><a href="https://www.wikiwand.com/zh-hans/货物崇拜编程" target="_blank" rel="noopener">货物崇拜编程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;小黄鸭调试法&lt;/strong&gt;，又称&lt;strong&gt;橡皮鸭调试法&lt;/strong&gt;、&lt;strong&gt;黄鸭除虫法&lt;/strong&gt;（Rubber Duck Debugging）是可在&lt;a href=&quot;https://www.wikiwand.com/zh-hans/软件工程&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件工程&lt;/a&gt;中使用的一种&lt;a href=&quot;https://www.wikiwand.com/zh-hans/调试&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;调试&lt;/a&gt;代码的方法。方法就是在&lt;a href=&quot;https://www.wikiwand.com/zh-hans/计算机程序&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序&lt;/a&gt;的调试、除错或测试过程中，操作人耐心地向&lt;a href=&quot;https://www.wikiwand.com/zh-hans/小黄鸭&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小黄鸭&lt;/a&gt;解释每一行程序的作用，以此来激发灵感与发现矛盾。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1g2w7hmp4bij30m80ciq3i.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="http://wangyuehan.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>macos把任意网站变成桌面软件</title>
    <link href="http://wangyuehan.github.io/year/05/10/macos%E6%8A%8A%E4%BB%BB%E6%84%8F%E7%BD%91%E7%AB%99%E5%8F%98%E6%88%90%E6%A1%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6/"/>
    <id>http://wangyuehan.github.io/year/05/10/macos把任意网站变成桌面软件/</id>
    <published>2019-05-10T03:45:21.000Z</published>
    <updated>2019-05-10T06:27:58.868Z</updated>
    
    <content type="html"><![CDATA[<p>以前，开发一个桌面软件要花费大量的人力和时间。现在，随着<code>web</code>技术的快速发展，很多业务逻辑已经在网站上实现。既然如此，能不能把网站快速转变成软件呢？这方面的实践已经有很多，早期的<code>Qt</code>，后来的<code>Electron</code>，都可以实现跨平台桌面软件的开发。不就是内嵌一个浏览器么？能不能快一些？再快一些？今天，给大家介绍一个工具，让你<code>5</code>分钟之内就把一个网站变成一个可安装的桌面软件。</p><a id="more"></a><h1 id="制作软件"><a href="#制作软件" class="headerlink" title="制作软件"></a>制作软件</h1><p>让我们以<a href="https://segmentfaut.com/" target="_blank" rel="noopener">https://segmentfaut.com</a>这个网站为例来制作我们的软件。</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>一句话搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nativefier</span><br></pre></td></tr></table></figure><h2 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h2><p>一句话搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nativefier &quot;https://segmentfault.com&quot;</span><br></pre></td></tr></table></figure><h2 id="运行软件"><a href="#运行软件" class="headerlink" title="运行软件"></a>运行软件</h2><p>好了，软件制作好了，看看效果吧：</p><p><img src="https://segmentfault.com/img/bV2nuw?w=1392&amp;h=912" alt="图片描述"></p><p>就是这么简单，有没有？</p><h2 id="可选步骤"><a href="#可选步骤" class="headerlink" title="可选步骤"></a>可选步骤</h2><p>以上是必经步骤，以下是可选步骤。</p><p>作人不可过于懒惰，进门之后，多多少少还是需要调整一下的。<code>Nativefier</code>提供了很多选项可供设置，包括应用软件名称、图标、初始窗口尺寸、是否全屏等等等等，具体可以到<a href="https://github.com/jiahaog/nativefier/blob/master/docs/api.md" target="_blank" rel="noopener">官网</a>查询。</p><p>同时，在设置好这些选项之后，为了便于以后调整和使用，最好是做一个批处理脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">nativefier --name &quot;SegmentFault&quot; &quot;https://segmentfault.com/&quot;</span><br></pre></td></tr></table></figure><p>调整完参数之后，重新运行这个脚本就可以了。</p><h1 id="制作安装包"><a href="#制作安装包" class="headerlink" title="制作安装包"></a>制作安装包</h1><p>制作完软件之后，我们得到是一个名为<code>SegmentFault.app</code>的应用程序，虽然已经可以执行了，但看上去不够专业，专业的安装包都是<code>.dmg</code>为后缀的文件，接下来我们就来制作一个<code>.dmg</code>。</p><p>打开Mac自带的<strong>磁盘工具</strong>，新建一个<strong>空白映像</strong>。</p><p><img src="https://segmentfault.com/img/bV2nvn?w=1034&amp;h=614" alt="图片描述"></p><p>初始时的大小设置为<code>200MB</code>，因为缺省的<code>100MB</code>放不下安装文件，但是这个尺寸后面可以压缩，所以即使设置为<code>300MB</code>也没关系的。</p><p><img src="https://segmentfault.com/img/bV2orp?w=932&amp;h=599" alt="clipboard.png"></p><p>建好之后，双击图标打开这个文件，把刚才上面做好的<code>SegmentFault.app</code>拷贝进去，然后再在里面建立一个指向<code>Applications</code>文件夹的快捷方式，右键菜单点击显示选项，勾选『<strong>始终以图标显示方式打开</strong>』，调整图标大小，在最下面挑选一张带箭头的图片作为背景。</p><p><img src="https://segmentfault.com/img/bV2osj?w=938&amp;h=627" alt="clipboard.png"></p><p>最后，再次打开磁盘工具，先推出刚才的这个文件，然后点击菜单『<strong>映像</strong>』-『<strong>转换</strong>』，把它压缩一下，一个完美的<code>dmg</code>安装包就制作好了。</p><p><img src="https://segmentfault.com/img/bV2os1?w=932&amp;h=599" alt="clipboard.png"></p><p>新的安装包大小大约是<code>51MB</code>，我把它上传到百度网盘了，有需要的同学可以<a href="https://pan.baidu.com/s/1ghaT1mj" target="_blank" rel="noopener">下载安装</a>试用一下。<code>Windows</code>的安装包我就不制作了，制作软件方法类似，只是在制作安装包的时候，<code>Windows</code>要稍微麻烦一些。</p><p>怎么样，制作一个桌面软件是不是很容易呢？你也来学着把贵司的网站变成软件吧！</p><p>备注：</p><p>segmentfault中mengdu大神编写过个专门为web app使用的浏览器，也是基于electron的，只要改下主页网址即可<br>项目地址：<a href="https://github.com/mengdu/vue-electron-chrome" target="_blank" rel="noopener">https://github.com/mengdu/vue…</a></p><p><img src="https://github.com/mengdu/vue-electron-chrome/raw/master/20171218164524.png" alt="截图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前，开发一个桌面软件要花费大量的人力和时间。现在，随着&lt;code&gt;web&lt;/code&gt;技术的快速发展，很多业务逻辑已经在网站上实现。既然如此，能不能把网站快速转变成软件呢？这方面的实践已经有很多，早期的&lt;code&gt;Qt&lt;/code&gt;，后来的&lt;code&gt;Electron&lt;/code&gt;，都可以实现跨平台桌面软件的开发。不就是内嵌一个浏览器么？能不能快一些？再快一些？今天，给大家介绍一个工具，让你&lt;code&gt;5&lt;/code&gt;分钟之内就把一个网站变成一个可安装的桌面软件。&lt;/p&gt;
    
    </summary>
    
      <category term="玩物志" scheme="http://wangyuehan.github.io/categories/%E7%8E%A9%E7%89%A9%E5%BF%97/"/>
    
    
      <category term="macOS" scheme="http://wangyuehan.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>分布式架构下的负载均衡</title>
    <link href="http://wangyuehan.github.io/year/05/09/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://wangyuehan.github.io/year/05/09/分布式架构下的负载均衡/</id>
    <published>2019-05-09T06:16:11.000Z</published>
    <updated>2019-05-09T06:20:56.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h3><p>百度词条里的解释是：负载均衡，英文叫Load Balance，意思就是将请求或者数据分摊到多个操作单元上进行执行，共同完成工作任务。<br>它的目的就通过调度集群，达到最佳化资源使用，最大化吞吐率，最小化响应时间，避免单点过载的问题。</p><a id="more"></a><h2 id="分布式架构下的负载均衡"><a href="#分布式架构下的负载均衡" class="headerlink" title="分布式架构下的负载均衡"></a>分布式架构下的负载均衡</h2><h3 id="负载均衡分类"><a href="#负载均衡分类" class="headerlink" title="负载均衡分类"></a>负载均衡分类</h3><p>负载均衡可以根据网络协议的层数进行分类，我们这里以ISO模型为准，从下到上分为：<br><strong>物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。</strong><br>当客户端发起请求，会经过层层的封装，发给服务器，服务器收到请求后经过层层的解析，获取到对应的内容。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2v1hobsrsj30me0kbdh3.jpg" alt></p><h4 id="二层负载均衡"><a href="#二层负载均衡" class="headerlink" title="二层负载均衡"></a>二层负载均衡</h4><p>二层负债均衡是基于数据链路层的负债均衡，即让负债均衡服务器和业务服务器绑定同一个虚拟IP（即VIP），客户端直接通过这个VIP进行请求，那么如何区分相同IP下的不同机器呢？没错，通过MAC物理地址，每台机器的MAC物理地址都不一样，当负载均衡服务器接收到请求之后，通过改写HTTP报文中以太网首部的MAC地址，按照某种算法将请求转发到目标机器上，实现负载均衡。<br>这种方式负载方式虽然控制粒度比较粗，但是优点是负载均衡服务器的压力会比较小，负载均衡服务器只负责请求的进入，不负责请求的响应（响应是有后端业务服务器直接响应给客户端），吞吐量会比较高。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2v1i3pm1gj30u00o4js5.jpg" alt></p><h4 id="三层负载均衡"><a href="#三层负载均衡" class="headerlink" title="三层负载均衡"></a>三层负载均衡</h4><p>三层负载均衡是基于网络层的负载均衡，通俗的说就是按照不同机器不同IP地址进行转发请求到不同的机器上。<br>这种方式虽然比二层负载多了一层，但从控制的颗粒度上看，并没有比二层负载均衡更有优势，并且，由于请求的进出都要经过负载均衡服务器，会对其造成比较大的压力，性能也比二层负载均衡要差。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2v1iix10bj30pq0loaaq.jpg" alt></p><h4 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h4><p>四层负载均衡是基于传输层的负载均衡，传输层的代表协议就是TCP/UDP协议，除了包含IP之外，还有区分了端口号，通俗的说就是基于IP+端口号进行请求的转发。相对于上面两种，控制力度缩小到了端口，可以针对同一机器上的不用服务进行负载。<br>这一层以LVS为代表。</p><h4 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a>七层负载均衡</h4><p>七层负载均衡是基于应用层的负载均衡，应用层的代表协议有HTTP，DNS等，可以根据请求的url进行转发负载，比起四层负载，会更加的灵活，所控制到的粒度也是最细的，使得整个网络更”智能化”。例如访问一个网站的用户流量，可以通过七层的方式，将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；将对文字类的请求可以转发到特定的文字服务器并可以使用压缩技术。可以说功能是非常强大的负载。</p><p>这一层以Nginx为代表。</p><p>在普通的应用架构中，使用Nginx完全可以满足需求，对于一些大型应用，一般会采用DNS+LVS+Nginx的方式进行多层次负债均衡，以上这些说明都是基于软件层面的负载均衡，在一些超大型的应用中，还会在前面多加一层物理负载均衡，比如知名的F5。</p><h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><p>负载均衡算法分为两类：<br><strong>一种是静态负载均衡，一种是动态负载均衡。</strong></p><h4 id="静态均衡算法："><a href="#静态均衡算法：" class="headerlink" title="静态均衡算法："></a>静态均衡算法：</h4><p><strong>1、轮询法</strong><br>将请求按顺序轮流地分配到每个节点上，不关心每个节点实际的连接数和当前的系统负载。<br>优点：简单高效，易于水平扩展，每个节点满足字面意义上的均衡；<br>缺点：没有考虑机器的性能问题，根据木桶最短木板理论，集群性能瓶颈更多的会受性能差的服务器影响。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2v1jjk953j30u00jw74l.jpg" alt></p><p>轮询</p><p><strong>2、随机法</strong><br>将请求随机分配到各个节点。由概率统计理论得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配，也就是轮询的结果。<br>优缺点和轮询相似。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2v1jqvzk4j30u00ismxh.jpg" alt></p><p>随机</p><p><strong>3、源地址哈希法</strong><br>源地址哈希的思想是根据客户端的IP地址，通过哈希函数计算得到一个数值，用该数值对服务器节点数进行取模，得到的结果便是要访问节点序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会落到到同一台服务器进行访问。<br>优点：相同的IP每次落在同一个节点，可以人为干预客户端请求方向，例如灰度发布；<br>缺点：如果某个节点出现故障，会导致这个节点上的客户端无法使用，无法保证高可用。当某一用户成为热点用户，那么会有巨大的流量涌向这个节点，导致冷热分布不均衡，无法有效利用起集群的性能。所以当热点事件出现时，一般会将源地址哈希法切换成轮询法。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2v1k0gks0j30u00jft98.jpg" alt></p><p>哈希法</p><p><strong>4、加权轮询法</strong><br>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。<br>加权轮询算法要生成一个服务器序列，该序列中包含n个服务器。n是所有服务器的权重之和。在该序列中，每个服务器的出现的次数，等于其权重值。并且，生成的序列中，服务器的分布应该尽可能的均匀。比如序列{a, a, a, a, a, b, c}中，前五个请求都会分配给服务器a，这就是一种不均匀的分配方法，更好的序列应该是：{a, a, b, a, c, a, a}。<br>优点：可以将不同机器的性能问题纳入到考量范围，集群性能最优最大化；<br>缺点：生产环境复杂多变，服务器抗压能力也无法精确估算，静态算法导致无法实时动态调整节点权重，只能粗糙优化。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2v1k9lghvj30u00jvmxi.jpg" alt></p><p>加权轮询</p><p><strong>5、加权随机法</strong><br>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p><p><strong>6、键值范围法</strong><br>根据键的范围进行负债，比如0到10万的用户请求走第一个节点服务器，10万到20万的用户请求走第二个节点服务器……以此类推。<br>优点：容易水平扩展，随着用户量增加，可以增加节点而不影响旧数据；<br>缺点：容易负债不均衡，比如新注册的用户活跃度高，旧用户活跃度低，那么压力就全在新增的服务节点上，旧服务节点性能浪费。而且也容易单点故障，无法满足高可用。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2v1kh1qe7j30u00iydg8.jpg" alt></p><p>键值范围法</p><p>（注：以上所提到的单点故障，都可以用主从方式来解决，从节点监听主节点心跳，当发现主节点死亡，从节点切换成主节点顶替上去。这里可以思考一个问题，怎么设计集群主从可以最大程度上降低成本）</p><h4 id="动态负债均衡算法："><a href="#动态负债均衡算法：" class="headerlink" title="动态负债均衡算法："></a>动态负债均衡算法：</h4><p><strong>1、最小连接数法</strong><br>根据每个节点当前的连接情况，动态地选取其中当前积压连接数最少的一个节点处理当前请求，尽可能地提高后端服务的利用效率，将请求合理地分流到每一台服务器。俗称闲的人不能闲着，大家一起动起来。<br>优点：动态，根据节点状况实时变化；<br>缺点：提高了复杂度，每次连接断开需要进行计数；<br>实现：将连接数的倒数当权重值。</p><p><strong>2、最快响应速度法</strong><br>根据请求的响应时间，来动态调整每个节点的权重，将响应速度快的服务节点分配更多的请求，响应速度慢的服务节点分配更少的请求，俗称能者多劳，扶贫救弱。<br>优点：动态，实时变化，控制的粒度更细，跟灵敏；<br>缺点：复杂度更高，每次需要计算请求的响应速度；<br>实现：可以根据响应时间进行打分，计算权重。</p><p><strong>3、观察模式法</strong><br>观察者模式是综合了最小连接数和最快响应度，同时考量这两个指标数，进行一个权重的分配。</p><p>转自it一刻钟</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是负载均衡？&quot;&gt;&lt;a href=&quot;#什么是负载均衡？&quot; class=&quot;headerlink&quot; title=&quot;什么是负载均衡？&quot;&gt;&lt;/a&gt;什么是负载均衡？&lt;/h3&gt;&lt;p&gt;百度词条里的解释是：负载均衡，英文叫Load Balance，意思就是将请求或者数据分摊到多个操作单元上进行执行，共同完成工作任务。&lt;br&gt;它的目的就通过调度集群，达到最佳化资源使用，最大化吞吐率，最小化响应时间，避免单点过载的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="http://wangyuehan.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="负载均衡" scheme="http://wangyuehan.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号学习日志</title>
    <link href="http://wangyuehan.github.io/year/05/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://wangyuehan.github.io/year/05/06/微信公众号学习日志/</id>
    <published>2019-05-06T06:43:13.000Z</published>
    <updated>2019-05-07T03:16:47.693Z</updated>
    
    <content type="html"><![CDATA[<p>我帮亲属做了一个公众号，当然我觉得微信公众号已经很人性化，大家把玩下即可入手。在这里，我就分享下我个人觉得效率比较好用的软件（仅给入门者看）。</p><p>本文涉及软件基于<strong>mac</strong>平台。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2rlgwsbtyj30go08cwei.jpg" alt></p><a id="more"></a><p>截图软件</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2rlkvi3dfj305e05ywea.jpg" alt></p><p>压缩软件（因为公众号文章内的图片不得超过2mb，但是很多手机或者相机照出的照片都很大，这个工具是我用的最好用的）</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2rllb4o4zj306205umx0.jpg" alt></p><p>修图工具</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2rlmseksej307806ewec.jpg" alt></p><p>图片管理工具（买断制，大概199，个人觉得最好用的）</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2rln6n5j6j305e05k0sk.jpg" alt></p><p>辅助工具</p><p>96微信辅助工具网站</p><p><a href="http://bj.96weixin.com/" target="_blank" rel="noopener">http://bj.96weixin.com/</a></p><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我帮亲属做了一个公众号，当然我觉得微信公众号已经很人性化，大家把玩下即可入手。在这里，我就分享下我个人觉得效率比较好用的软件（仅给入门者看）。&lt;/p&gt;
&lt;p&gt;本文涉及软件基于&lt;strong&gt;mac&lt;/strong&gt;平台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1g2rlgwsbtyj30go08cwei.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="玩物志" scheme="http://wangyuehan.github.io/categories/%E7%8E%A9%E7%89%A9%E5%BF%97/"/>
    
    
      <category term="微信公众号" scheme="http://wangyuehan.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-薛兆丰的北大经济学课</title>
    <link href="http://wangyuehan.github.io/year/05/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%96%9B%E5%85%86%E4%B8%B0%E7%9A%84%E5%8C%97%E5%A4%A7%E7%BB%8F%E6%B5%8E%E5%AD%A6%E8%AF%BE/"/>
    <id>http://wangyuehan.github.io/year/05/05/读书笔记-薛兆丰的北大经济学课/</id>
    <published>2019-05-05T04:57:40.000Z</published>
    <updated>2019-05-05T04:59:20.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g2qcr33klmj315d0tzmya.jpg" alt></p><a id="more"></a><p>东西不够</p><ul><li>人性与稀缺<ul><li>经济学视角<ul><li>1 战俘营里的经济组织<ul><li>我们看到的社会，只要有人在，就会有需求在；只要有两个人以上的人在，他们的需求就不一样，需求不一样就会有交易，有交易就会产生对货币的需求，有货有劣币驱逐良币的现象，有货币就有宏观经济的波动，有通货紧缩，有通货膨胀有交易就有信息不对称，有信息不对称就会有中间商有人在的地方就有情绪、就有舆论、就有外部性。于是整个战俘营里面的现象，跟战俘营外面所发生的现象是一致的</li></ul></li><li>2 马粪争夺案<ul><li>每当我们在讲公正的时候，背后的含义是说，它是符合效率的。只有那些让社会里每个人都有积极去积累财富的规则，才是公正的规则；只有那些让社会能存活下来的规则，才是公正的规则。也就是说，效率决定了公平，这就回到了我们在开头提到的问题。当别人在讨论到底公平重要，还是效率重要的时候，学过经济学的人明白，其实在公平背后是效率的考量，不是单个人效率的考量，而是整个社会长远发展的效率考量，它们两者是一体的。</li></ul></li><li>3 看得见和看不见的<ul><li>经济学关心的一个最核心的问题是比较和选择。而要做好比较和选择，一个重要的前提，就是不仅要看见那些看得见的东西，还要尽量去看见那些不容易看见的东西，那些需要推测才可以看得见的东西。</li></ul></li><li>4 经济学不关心阴谋论<ul><li>经济学家关心的，是那些人们出于良好的愿望而产生的有害的经济政策，那些事与愿违的现象。如果你有问，经济学家和普通大众有什么区别的话，其中一个很重要的区别，就是经济学家不关心阴谋论，他们只关心事与愿违的因果规律。</li></ul></li></ul></li><li>人的本性<ul><li>5 不确定性、进化与经济理论<ul><li>经济学关心的是存活条件。一个人，一个组织，甚至一个制度，能不能存活下来，和各种条件、情况的变化有关，而跟人是不是理性的没有关系。</li></ul></li><li>6 亚当·斯密的人性观<ul><li>小圈子靠爱心，大世界靠市场。人是自私的-&gt;他有爱心-&gt;爱心有限，爱心不能扩张-&gt;于是我们需要一个陌生人互助平台，那就是市场。</li></ul></li><li>7 铅笔的故事<ul><li>一支简单的铅笔，在世界是从来没有人能够掌握生产它的全部知识，它需要成千上万人通过合作，才能生产制造出来。而这些共同合作生产这支铅笔的人，可以互不相识，彼此憎恨甚至互相敌视，但这并不妨碍他们合作生产一支铅笔。而当这只铅笔生产出来之后，我们每个人只需要付出很小的代价就能得到它，这个神奇的故事之所以发生，是因为有市场机制在协调人们分工与合作。</li></ul></li><li>8 商业是最大的慈善<ul><li>由于存在缺乏反馈机制、所托非人、养懒汉效应等问题，行善扶贫效果往往大打折扣，完全无法到达预期目标。而商业行为，责由于有市场机制发挥作用，协调和鼓励人们分工合作，所以能大幅、持续而高效地改进人们的福利。</li></ul></li></ul></li><li>稀缺与选择<ul><li>9 稀缺<ul><li>经济学最基础的那块石头，不是理性人假设的，也不是人性自私的假设，而是稀缺这个基本的事实。稀缺有两个原因，第一是你喜欢的东西别人也喜欢；第二是人的需求，其实是无限的。</li></ul></li><li>10 选择和歧视<ul><li>稀缺必然导致歧视。我们不应该问要不要歧视，而是有问：应该如何歧视。</li></ul></li><li>11 凡歧视必得付代价<ul><li>凡歧视必得付代价。歧视的来源有两个，一个是人的偏好，二是信息不对称。而不管是哪一个起源，只要歧视所付代价越高，人们就越会努力去减少不必要的歧视。</li></ul></li><li>12 歧视的作用和限制歧视的恶果<ul><li>在现实中，歧视往往都是有原因的，尤其在激烈竞争的市场经济下，歧视往往是有效率的。如果出于政治原因，政府逼着商业银行改变歧视标准的话，就有可能酿成恶果。</li></ul></li></ul></li></ul></li><li>成本的深义<ul><li>成本初探<ul><li>13 一句话给成本下定义<ul><li>成本就是放弃了价值最高的代价。做一个选择，你放弃的是所有其他选项当中价值最高的那个选项。选项是选项的成本，选项与选项互为成本。</li></ul></li><li>14 你的成本由别人决定<ul><li>做一件事，负面的感受不是你的成本，只有你需要付出的最大代价才是成本。而你要付出的代价是什么，到底有多大，很大程度上取决与社会评价。从一个商铺的用途选择、租金收入，到一个人的职业选择、工资收入都是如此</li></ul></li><li>15 别只盯着钱<ul><li>核心主题，是货币成本和总成本之间的比较。我们不仅仅要看到钱，还要看到钱以外的成本。每当做决策的时候，我们要权衡的是全部成本，而不仅仅是货币成本。在大多数情况下，中间商是帮我们减少总成本的。而中间商之间的竞争，会使我们的总成本降到最低。</li></ul></li><li>16 沉没成本不是成本<ul><li>沉没成本不是成本，这句话知易行难，我们要多多实践，学会当机立断。既然沉没成本不是成本，那么我们用什么来指导未来的行动呢？答案是盯住边际成本和边际收益。</li></ul></li></ul></li><li>成本进价<ul><li>17 从成本来理解盈利与亏损<ul><li>从成本的角度定义盈利的亏损这两个常见的经济学概念。我们的定义方法非常独特；无论是盈利还是亏损，都是刹那间完成的。一旦出现盈利或亏损，我们就重新评估资源。资源未来使用的成本，就在新的评估水平上进行计算。</li></ul></li><li>18 最终产品的供需决定原材料的成本<ul><li>今天的内容是批驳成本决定论，树立供需决定论。成本决定论是错的，不是原材料成本，决定最终产品的价格。而是最终消费品的供需，决定最终消费的价格，而这个价格，再反过来决定前面每一种生产要素的成本。</li></ul></li><li>19 租是对资产的付费<ul><li>有一种资产，不以收费的变化而变化，这种资产带来的收入就是租，这是一种相对“旱涝保收”的收入。我们每个人，都在享受一定程度的租。但随着时间、竞争条件的变化，真正旱涝保收的收入并不存在。</li></ul></li><li>20 寻租-乞丐没有白拿施舍<ul><li>竞争无处不在，而只要有竞争，就必定有资源消耗。在政府规制下，人们为了争取特殊优惠或经营权利，就会展开各种竞争，在这过程中总会产生社会资源的耗费。在经济学界，寻租一词特指这种向政府争取特殊优惠或权利的行为。</li></ul></li></ul></li><li>科斯定律<ul><li>21 社会成本问题：伤害与被伤害<ul><li>在社会中，有众多交互案例，一般看来都是一方在伤害另一方，都是一方需要对另一方做出赔偿，都需要限制加害于人的一方。但经济学家科斯却有不同看法，至于科斯有什么不同看法，我们需要下一节课才能揭晓。</li></ul></li><li>22 社会成本问题：值得与不值得<ul><li>所有的伤害都是相互的，不是一方伤害另一方，而是双方都在争夺稀缺的资源。在会产生互相伤害的事件中，谁避免伤害的成本最低，谁就应该承担最大责任，这样分摊责任，整个社会为避免意外所要付出的总成本就会达到最小。</li></ul></li><li>23 谁用得好归谁<ul><li>一项有价值的资源，不管从一开始它的产权谁属，最后这项资源都会流动到最善于利用它、能最大化利用其价值的人手里去。这是科斯定律的一个重要含义。而在制度设计中，我们应该尽量让这种资源的流动和分配更方便容易，从而提高各项经济资源的使用效率。</li></ul></li><li>24 越富足越健康<ul><li>我们必须用持平的眼光来看待污染问题，因为这不是一方污染另外一方的问题，而是双方或者多方在争用一种稀缺资源的问题，我们得取得一个平衡。</li></ul></li></ul></li><li>交易费用<ul><li>25 有人群就有交易费用<ul><li>第一，上个单元说的科斯定律：“资源不管谁拥有，它最终都会落到使用价值最高的人手上。”那是一种理想状态，跟我们的现实生活有很大差距。现实生活中到处都有交易费用。第二，恰恰由于到处都有交易费用，所以制度、风俗、习惯就变得非常重要，因为它们是所有权利和责任的初始界定。</li></ul></li><li>26 征地的权衡<ul><li>今天我们讲了科斯定律的一个非常重要、非常现实的应用，那就是对征地问题要有一个持平的看法。对土地产权的保护，做到“风能进，雨能进，国王不能进”的地步，不一定是最合理的。</li></ul></li><li>27 寻求合作解<ul><li>今天我们讲的内容是，怎么样充分领会科斯定律的精神，在现实生活的各种冲突当中，积极地寻找合作解。</li></ul></li><li>28 成本概念的递进<ul><li>1.成本概念深不可测</li><li>2.成本是放弃了的最大代价</li><li>3.产品价格与成本无关</li><li>4.所有的盈利与亏损都是一次性的</li><li>5.租与寻租的概念</li><li>6.社会成本问题引发科斯定律</li><li>7.交易费用永远为正</li><li>8.交易费用越低越好</li><li>9.制度费用与制度变迁的费用</li><li>10.存在于想象中的体制成本</li></ul></li></ul></li></ul></li><li>需求的规律<ul><li>需求定律（上）<ul><li>29个人主义的主观价值论<ul><li>我们总结一下今天的内容。从今天起，我们开始讲需求定律。需求定律当中遇到的第一个重要的概念是个人估值，个人估值有3个特点：第一，它是个人的，不是集体的；第二，它是主观的，不是客观的；第三，它是由行动支撑的，不是凭空的愿望。而且正因为它是行动，所以外人是可以观察、衡量、记录的。然后，我们还讲了主观价值论和客观价值论的三个区别：第一是客观价值论能解释的，主观价值论也能解释；第二是客观价值论不能解释的，主观价值论，或者说个人估值这个概念也能解释；第三是主观价值论能够更好地指导生产。</li></ul></li><li>30 边际革命<ul><li>我们今天讲了一个非常重要的概念“边际”。边际就是新增带来的新增。边际成本就是每多生产一个单位的产品所要新增的成本；边际收入就是多卖一个产品所新增得到的收入；边际产量就是多做一个单位的投入所能够得到的新增的产量；边际效用就是多消费一个单位的商品所带来的新增享受。而且我们说，我们带来的新增的享受，总是有一个递减的规律。由于资源是有限的，每个人怎么样才能够最有效地利用他们有限的资源，得到最高的效用呢？办法就是边际的平衡。就是在每多花一个单位的成本，不管这个成本指的是多一个单位的时间、多一个单位的金钱、多一个单位的注意力、多一个单位的努力，他们都要把这多一个单位的成本，花在那些带给他们收益最大的那种活动或商品上去。从而使得所有这些商品和活动给他们带来的边际收益是相等的，这就叫边际平衡的概念。如果一个人这么做了，那么他得到的总收益就会达到最大。</li></ul></li><li>31 需求第一定律1/2<ul><li>定律1：无论何时何地，价格提高，商品的需求量就减少，价格降到一定的程度，需求量就会增加。需求定律的基本含义：价格提高，商品的需求量减少；价格降低到一定程度，需求量就会增加。这是需求第一定律的基本含义。</li></ul></li><li>32 需求第一定律2/2<ul><li>需求和供给之间没有绝对的区别。当价格比较低的时候，人们是需求者，当价格高到一定程度，人们就会从需求者变成供给者。第二，我们还讲了剩余的概念，我们说最好我们称剩余为交易剩余，而不是消费者剩余或者生产者剩余。</li></ul></li></ul></li><li>需求定律（下）<ul><li>33 需求第二定律1/3<ul><li>我们说弹性跟斜率不一样，在一条需求曲线上面，斜率是处处相等的，但是在同样一条需求曲线上面，弹性却处处不等。在价格比较高的部分，弹性大于1，也就是说一种商品具有弹性，代表这种商品是一种奢侈品；在价格比较低的部分，弹性小于1，它代表的是，这种商品是一种必需品。同样一种商品，到底它是奢侈品还是必需品，取决于价格的不同。</li></ul></li><li>34 需求第二定律2/3<ul><li>随着时间的推移，需求弹性会变得越来越高，人们寻找替代品的空间会越来越大，对策越来越多。</li></ul></li><li>35 需求第二定律3/3<ul><li>今天我们讲的是需求第二定律的一个重要的应用，那就是税负的分摊。税负通常是由供需双方共同承担的，至于谁承担的多，谁承担的少，取决于它们之间的相对弹性，而与法律或者风俗的规定没有关系。</li></ul></li><li>36 需求第三定律<ul><li>定律3：每当消费者必须支付一笔附加费的时候，高品质的产品就相对低品质的产品变得便宜了，这笔附加费越高，高品质产品就变得越便宜。有时候我们把这个定律叫做“好东西运到远方去定律”。有一次我讲完需求第三定律以后，有位同学上来跟我说：“薛老师，我再给你提供一个例子。”他说，他以前一直听说四川是出美女的地方，后来终于有机会去四川了，但他发现四川并没有那么多的美女。他当时就觉得奇怪，今天终于知道答案了，原来四川的美女都跑到远方去了。</li></ul></li></ul></li></ul></li><li>价格的作用<ul><li>价格初探<ul><li>37 经济的计算问题<ul><li>预测经济：三个不可逾越的根本障碍。1，人际之间的效用不可比较，个人的偏好，是不能做横向比较的。对于整个社会来说，每一个人的目标，每一个企业的目标都不一样，所以整个社会你不知道应该朝哪个方向去努力。2，数据不可得。3，奖惩很难恰如其分</li></ul></li><li>38 知识在社会中的运用<ul><li>哈耶克的《知识在社会中的运用》。他指出，经济体系要解决的不是边际平衡的问题，而是应变的问题，是怎么处理，存在于不同的人的大脑里面的、各种各样的知识的问题，怎么解决奖惩的问题。他指出，解决这些根本问题的最好办法就是价格。价格有三个作用：1，价格能够非常有效、非常节俭、目标非常明确地传递关于稀缺的信息；2，价格能够指导人们进行生产，选择不同的生产方式；3，价格能够解决奖惩的问题。或者说它能够指导人们对商品的分配，有钱的人多拿，没钱的人少拿。</li></ul></li><li>39 如何分饼决定饼做多大<ul><li>价格是每一个人发自他们内心，根据他们的实际情况，最后达成的一个经济行为。这就是一个新的分饼游戏。一旦有了这个分饼游戏，科学家搞科研的积极性就不一样了，科学家搞科研的方向就不一样了。这个《拜杜法案》带来了今天美国科技的蓬勃发展。总结要点：第一，我们对价格最地道的理解，是要理解价格的形成机制，价格永远是由一宗一宗的具体交易、一个一个人的具体需求出发，来形成的一个综合指标。我们不能把这个逻辑顺序给搞混了。第二，价格的三个作用：传递需求的信号，指导生产以及指导分配，这三个作用里面，指导分配这个作用，奖惩的作用最重要。也就是说，如何分饼会决定饼能做多大。</li></ul></li><li>40 换个角度看发国难财的行为<ul><li>今天我们讲了拦路抢劫和乘人之危之间的区别，我们讲了发国难财，我们在感情上好像难以接受，但是在实际效果上，发国难财的人，是给那些遭受灾害的人更多的帮助，更多的选择。鼓励发国难财的人，才能使问题得到更好的解决，他们应该得到的是奖励，而不是惩罚。</li></ul></li></ul></li><li>价格进阶<ul><li>41 世界上有哪些竞争规则<ul><li>用暴力作为标准的话，那么身体比较强壮的人比较容易胜出；你用智力做标准的话，比较聪明的人容易胜出；根据后天的禀赋，他们的种族、种姓、出身户籍，那出身比较好的人，根正苗红的人就比较容易胜出；根据等待的时间来判断，先到先得作为规则的话，那时间成本比较低的人就比较容易胜出；如果按照出价的高低，那有钱人就比较容易胜出。</li></ul></li><li>42 各种竞争规则孰优孰劣<ul><li>1，在所有的竞争规则当中，没有任何一个规则是比别的规则更公平的，不同的人站在不同的立场就有不同的偏好，不同的选择；2，不论你选择哪一种竞争方式，人们都会按照这种竞争方式去竞争，而竞争本身就会耗费资源；3，在竞争过程当中所损耗的资源，通常都是一种无谓的损失。也就是说，对竞争者本身，对那些赢家来说，这是值得付出的代价，但是对社会其他人来说，他们从中得不到好处；4，用出价的办法来竞争的话，有一个特点，跟其他的竞争方式不一样，那就是每当人们为了赚更多的钱，从而在出价的过程当中胜出的时候，人们不得不向社会其他人提供他们所需要的产品。这时候，整个社会因为竞争带来的不是无谓的损失，而是更多的财富。所以从公平的角度看，出价高低不是一个更公平的办法。但是从效率的角度，从社会财富积累的角度，从如何减少竞争带来的无谓损失的角度来看，出价高低是比别的竞争方式更有效率的，它直接带来了社会财富的高速集聚。</li></ul></li><li>43 何为短缺和过剩<ul><li>稀缺是永恒的，而短缺和过剩都是价格受到人为干预的结果。当价格过低的时候，人们不得不展开价格以外的竞争方式，来争夺他们需要的商品。这时候就会出现短缺。而当价格被人为拔高以后，卖家就不得不采用价格以外的方式，才能把东西卖出去，这时候就会出现所谓的过剩现象。</li></ul></li><li>44 最省事地规避价格管制<ul><li>经济学家张五常对“价格管制理论”一个非常重要的贡献，他提出两个命题：第一，价格管制必然导致资源的耗散；第二，人是损失最小化的动物，人们会依次选择那些能够最大程度挽回价格损失的竞争方式，从而使得损失最小化。</li></ul></li></ul></li><li>价格管制<ul><li>45 春运火车票还不够高<ul><li>对价格管制的执法越严，人们所不得不采用的迂回方式就越浪费。所以我一直觉得，一张小小的火车票是一个人能不能够掌握经济规律，能不能懂得价格的作用，能不能把自身的利益和客观的规律分开来考虑的一块试金石。</li></ul></li><li>46 美国的房租管制<ul><li>美国房租管制的经验教训：首先我们应证了学过的概念，什么叫稀缺什么叫短缺；更重要的是我们讲到政府如果真的要帮助穷人的话，公正而合理的办法，是通过民主的方式，让大多数的纳税人出钱向房东购买住房，分给那些有需要的穷人，而不是通过行政命令，让那些恰好当上房东的人来承担对穷人提供帮助的责任。</li></ul></li><li>47 解除价格管制-果断与沉稳的拿捏<ul><li>价格管制是不对的，这一点我们容易理解，但是解除价格管制，我们需要考虑的因素就要复杂得多。当然，现实生活中还有另外一种可能性，那就是不愿意改革的人，总拿社会稳定来作为借口。不管怎么样，要在勇气和耐心之间，大胆和沉着之间进行合理的拿捏是不容易的事情。</li></ul></li><li>48 实物补贴和货币补贴的权衡<ul><li>实物补贴和货币补贴之间的权衡，对政府来说，实施实物补贴做起来可能更容易，更满足他们父爱主义的精神，而且可能更容易照顾亲近自己的供应商。但是要真正达到帮助穷人的目的，实际上，货币补贴才是浪费更小，效率更高，给穷人自由度更高的办法。</li></ul></li></ul></li><li>价格的教益<ul><li>49 房价上升好不好<ul><li>我们要客观地去分析、去对待房价上升的正面因素和负面因素，不能一刀切说房价涨了就是好的，或者房价跌了就是好的，因为价格只是反映现实各种因素的一个综合指标而已。如果管不住温度就去管温度计，这是一种自欺欺人的做法。</li></ul></li><li>50 廉价保障房更贵<ul><li>低价保障房不可能是免费午餐，我们需要看清楚这几个要点：1，房屋不是一种标准品，它是一种服务，是一种综合的服务；2，私人开发商是这种综合服务更好、更适合的提供商；3，如果让私人能够拥有房屋，而不是租用公租房的话，这些房屋的流动性会更高，会鼓励人们积极上进，能够扩大不同家庭上升的渠道。只要我们看清楚这几点，我们就应该坚持房屋服务市场化、商品化的道路。</li></ul></li><li>51 没有使用需求就没有投资需求<ul><li>澄清了两个容易让人混淆的概念。1，是空置率，我要说明的是，我们不可能客观地去衡量或者计算所谓的房屋空置率，因为房屋是一种综合的服务。2，使用需求和投资需求之间没有本质的区别，不应该把它们对立起来。任何投资需求都是建立在使用需求的基础之上的。</li></ul></li><li>52 价格是高度分权的结果<ul><li>价格有三个基本的作用：1，以最直接、最节俭、最有效的方式向有需要的人、向相关的人传递关于稀缺性的信号。2，指导人们根据稀缺性的信号来安排生产的方式。3，指导产品的分配。在这三个作用当中，第三个作用最重要，如何分饼决定了这个饼能做多大。1.大城市平均房价还有上升余地。2.中美房价租售比的差异很大，美国1:200中国1:600。3.旅居地产不值得购买。4.价格协调人与人之间的关系。5.价高者得是最有效的竞争方式。6.过剩与短缺均源于价格管制。</li></ul></li></ul></li></ul></li><li>权力的安排<ul><li>权利的辨析<ul><li>53 权力有别于能力<ul><li>没有经过文明熏陶的动物，脑子是转不了那么多弯的。所以我们说，哪怕是一个杀人犯，他也不愿意生活在一个随便被人杀的社会里面；哪怕是一个盗贼，他也不愿意生活在一个自己的财物随便被人偷盗的社会里面。这是文明一步一步进化的结果。这就是我们今天要讲的重点，权利和能力之间的区别。能力取决于自己能够占有多少，而权利取决于别人、社会的其他人愿意给你多少。</li></ul></li><li>54 权利是人赋的而非天赋的<ul><li>今天的重点，我们讲了权利不起源于神，不起源于自然，不起源于逻辑，不起源于法律。权利来自于人类的经验，尤其是惨痛的经验教训，来自于人与人之间长期的博弈，权利来自于制度的设计。</li></ul></li><li>55 自由不等于免费<ul><li>今天我给你讲的政治自由是人们重要的权利，但是要行使政治自由，往往也需要动用经济资源，而经济资源并不是免费的，我们不能让人们为了实现政治自由，而去伤害别人的经济自由，因为经济自由本身就是人非常重要的权利，同时也是政治自由的非常重要的基础。</li></ul></li><li>56 权利的保护物理属性而非经济属性<ul><li>如果新的技术让一种新的服务应运而生，我们就应该鼓励这种新的技术替人们服务，否则的话，新的技术永远没办法普及，我们永远生活在那些旧技术的年代。</li></ul></li></ul></li><li>权利的保护<ul><li>57 产权的兴起<ul><li>好，今天我们讲了产权兴起的两个重要动力。一个是为了减少外部性；第二是由于交通成本下降、集聚带来的，对陌生人之间协调的需要。</li></ul></li><li>58 产权：使用权、收益权和转让权<ul><li>好，今天我给你讲了产权的三个构成部分：使用权、收益权和转让权。而当中转让权是最重要的，因为转让权意味着永久地占有使用权和收益权。</li></ul></li><li>59 产权保护之一：财产原则<ul><li>好。今天我们介绍了一篇经典文章，它是关于产权保护的三种基本方式的，那就是财产原则、责任原则和不可转让原则。</li></ul></li><li>60 产权保护之二：责任原则<ul><li>今天我们通过交易费用的角度对财产原则和责任原则进行了比较。</li></ul></li></ul></li><li>权利的限制<ul><li>61 产权保护之三：不可转让原则<ul><li>宪法和法律里面当然也没明确说个人不拥有自己的器官，但同时也没有明确说个人拥有对自己器官的所有权，所以法官不能随便地越雷池半步，他们应该保持缄默。</li></ul></li><li>62 产权保护之三：不可转让原则（续）<ul><li>总结一下，我们知道产权的保护有财产原则、责任原则，还有我们这两天讨论的不可转让原则。不可转让原则之所以实施有各种各样的原因，而我们经济学分析的重点，是当禁止人们买卖某种商品，而市场上仍然有需求的时候，会产生什么样的效果，这些效果是不是符合我们当初的良好愿望。</li></ul></li><li>63 边际收益递减定律<ul><li>而当边际生产率等于边际成本的时候，总产量就到达最高峰，再往下去，也就是你继续投入这种生产资料的话，这时候这种生产资料的边际生产率就会低于它的边际成本，也就是得不偿失。这时候，总产量就会从它的最高点往下滑，就开始减产了。这四条曲线的关系，也就是：1,上升然后下降的边际生产率曲线；2,像一个碗一样倒过来，碗底被边际生产率穿过的平均生产率曲线；3,还有那条边际成本曲线；4,还有那条先是加速上升，然后减速上升，最后掉头向下的那条总产量曲线。这四条曲线的相对关系，是在任何一本经济学教科书中都能够看到的内容，这是一个普遍适用的经济学基本原理。所以，咱们渔村的故事里面那些数字不是随意编造的，它具有非常强的一般性。当然，你看一般的教科书，它里面不会讲渔村的故事，它不会把这个图跟所有制的比较联系起来，但这是我们将要讲的内容。</li><li></li><li></li></ul></li><li>64 集体所有制<ul><li>总结一下，集体所有制的特点，在于让每一位成员平均分享经济权，平均分享政治权，但它带来三个问题：1,资源利用不够充分，因为每个人都是盯着平均收益不下降的那个点；2,成员缺乏对资源长远收益的关心，他们只关心成员权有效期内，资源能够带给他们的收益；3 集体的资产在发生转让的时候，交易的费用特别高。因为你必须取得每一位成员的同意。</li></ul></li></ul></li><li>所有制论衡<ul><li>65 私有制<ul><li>我们总结一下，在私有制下面有好几个特点：</li><li>1,工资的决定是由工人在别处的机会确定的；2,船的主人盯着的那一栏是边际，边际收入和边际成本。而盯住边际收益和边际成本，就能够实现他手上的经济资源——这艘船净利润的最大化；3,由于船是他的，他能够行使转让权，他不会因为转让这个资源而吃亏。因为这艘船，这个经济资源的现值，等于这艘船未来能够给他带来的所有收益的总和；4,所有权和经营权可以分离，哪怕是个傻瓜拥有一项资源也无所谓，哪怕是个门外汉拥有一项资源那也无所谓，只要他关心他手上资源经济的价值，他就会任用贤能，他就会请专家来帮忙，使资源的利用达到收益的最大化。同时，在私有制下面，物主也会关心资产长久的、未来的收益，因为资源的现值总是反映了资源未来收益的总和。他们什么时候想要不干了，只要把资源卖掉，他们就能够享用这些资源未来才能实现的利益。</li></ul></li><li>66 全员所有制<ul><li>今天我们是继续我们的渔村的故事，我们集中讨论的是全员所有制，也就是说这艘船归社会上的每一位成员所有，任何人只要想上船就可以上船，这时候大家盯住的，也仍然是平均收益这一栏，我们的问题是：“ 在这种治理模式下面，最多有几个人上船？ ”要回答这个问题，大家要盯住的也还是平均收益这一栏，但跟集体所有制不一样的地方在于，在集体所有制下面，只要当平均收益从上升转变为下降的那一刻起，船上的人就开始排斥别人上船了，但在全员所有制下面，船上的人没有权利阻止别人上船，而只能决定自己不上船，所以他们关注的是自己在船上的平均收益，不要低于他们在别处，在岸上所得到的收益。一旦他们在船上所得到的平均收益，低于他们在岸上能够得到的收益的时候，他们就选择不再上船了，人们是在这个时候停止上船的，而结果呢，是人们在船上得到的收益，跟他们在岸上得到的收益是一样的，换句话说，上船并没有使他们得到更多额外的收益，这艘船在物理上还存在，但是在经济价值上就荡然无存了，这种现象被一些学者称为公地的悲剧。</li></ul></li><li>67 公地真会悲剧吗<ul><li>今天我们反转了昨天所讲的内容，指出公地不一定会产生悲剧，因为人会组织起来形成规则，减少损失。</li></ul></li><li>68 政府所有制</li></ul></li><li>公共品与私用品<ul><li>69 经济学百年论堵<ul><li>今天我们回顾了关于城市如何治堵的近一百年的经济学争论，两位著名的经济学家庇古和奈特，他们对治堵的观点有相同的，也有不同的。两位经济学家都认为，随意的让人们上路，道路的价值就会收到贬损，但是庇古认为，道路拥堵是自由放任的结果，政府应该管一管，而奈特认为，问题的关键在于道路没有形成排他性的产权，一旦形成排他性的产权，治堵的问题就能够解决。而今天我们讲的最关键的是，我们把治堵的问题跟渔村的故事，完全结合起来了，因为这本身就是一个经典的公地悲剧的例子，我们要追求的是道路上的车辆数目，跟道路的价值最有效的结合，车辆太少，这是浪费；车辆太多，拥堵，也是浪费，能让道路的价值发挥到最大的行车数量，才是最适当的数量，很显然，我是赞成征收道路拥堵费的。</li></ul></li><li>70 拥堵费的实践<ul><li>今天我们讨论了，如果征收交通拥堵费的话，人们最常见的各种质疑。我们说征收交通拥堵费，最重要的作用是保证道路仍然是路，而不是停车场，保护道路应有的经济价值，而征收拥堵费能够起到筛选需求的作用，筛选需求，有别于筛选贫富，道路使用效率的提高，哪怕是对穷人也是有利的，同时我们也介绍了美国征收交通拥堵费的实践经验。</li></ul></li><li>71 共用品和私有品<ul><li>今天，我们解释了两个重要概念的区别，一个是公用品，一个是私用品，我们不能望文生义，以为公用品就是政府提供的，私用品就是私人提供的。公用品和私用品的关键区别，在于一个人用影不影响别人使用这一物理属性，这个属性称之为竞争性。同时我们还解释了什么叫排他性，所谓的排他性，指的是一件商品它在实际使用的时候，物主能不能够很方便地把其他的使用者排除在外。</li></ul></li><li>72 灯塔的故事<ul><li>我们要做一个总结了。不知不觉我们前面用了整整五个礼拜的时间，来讨论关于权利的经济学。我们讲了权利有别于能力；讲了权利是人赋的，不是天赋的；我们讲了自由不等于免费；我们还讲了权利要保护的仅仅是物理属性，不是经济属性；我们还讲了产权的三种保护办法——财产原则、责任原则和不可转让原则；我们对四种所有制进行了比较；我们还讲了公用品和私用品之间的区别。今天我们讲了有趣的灯塔故事，讨论了公共服务能不能也由私人提供，政府提供的公共服务能不能够也收费这样的问题。</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1g2qcr33klmj315d0tzmya.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://wangyuehan.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://wangyuehan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="经济学" scheme="http://wangyuehan.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>欢迎访问新博客-www.wangyurui.top</title>
    <link href="http://wangyuehan.github.io/year/05/05/%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE%E6%96%B0%E5%8D%9A%E5%AE%A2-www-wangyurui-top/"/>
    <id>http://wangyuehan.github.io/year/05/05/欢迎访问新博客-www-wangyurui-top/</id>
    <published>2019-05-05T04:48:28.000Z</published>
    <updated>2019-05-05T04:50:49.708Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎访问我的新博客：<a href="http://www.wangyurui.top/" target="_blank" rel="noopener">http://www.wangyurui.top/</a></p><p>欢迎关注我，喜欢唱、跳、rap的一枚大男孩，music～</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎访问我的新博客：&lt;a href=&quot;http://www.wangyurui.top/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.wangyurui.top/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎关注我，喜欢唱、跳、rap的一枚大男孩，music～&lt;/p&gt;
    
    </summary>
    
    
      <category term="新博客" scheme="http://wangyuehan.github.io/tags/%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>一篇文章带你了解APP PUSH推送机制</title>
    <link href="http://wangyuehan.github.io/year/04/26/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3APP-PUSH%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://wangyuehan.github.io/year/04/26/一篇文章带你了解APP-PUSH推送机制/</id>
    <published>2019-04-26T06:39:38.000Z</published>
    <updated>2019-04-26T06:41:52.238Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写作目的：</strong></p><p>本文主要讲解关于APP PUSH的流程、机制及相关经验，一是为了方便各位可以针对APP迅速制定PUSH消息推送方案，实现0到1的推送功能搭建，二是可以了解下PUSH流程，对各个环节针对性地提高触达率。</p><a id="more"></a><h1 id="一-APP-PUSH定义与价值"><a href="#一-APP-PUSH定义与价值" class="headerlink" title="一 APP PUSH定义与价值"></a>一 APP PUSH定义与价值</h1><p>APP PUSH的定义为在手机终端锁屏状态下通知栏展示或在操作前台顶端弹出的消息通知，点击后可唤起对应的APP，并在APP内跳转到指定页面。</p><p>push消息是通知用户，引导用户进行参与活动、购买产品的重要手段，而且PUSH消息也可以引导用户查看消息，唤起APP提高日活，是一块重要的流量。</p><h1 id="二-APP-推送分类"><a href="#二-APP-推送分类" class="headerlink" title="二 APP 推送分类"></a>二 APP 推送分类</h1><p>从应用的功能来划分，主要分为三类应用，第一类是IM类APP，如微信、QQ等；第二类是新闻资讯类，如华尔街见闻等；其余暂归为为工具类，比如支付宝、美团等。</p><p>每种类型APP对PUSH的需求也不同，IM类APP追求实时、稳定的触达，此类APP一般通过自己的长连接进行消息推送，保证用户在收到消息的时候能够实时地接收消息消息。另外，一些安卓厂商也会给予头部APP的进程一定保护，对相关的进程纳入白名单，在清理进程的时候予以忽略。</p><p>新闻资讯类的APP与工具类APP的PUSH推送机制基本一致，仅在频率控制上有差异，新闻资讯类由于新闻资讯较多，需要将突发新闻及时推送给用户。</p><p>由于目前工具类的APP占大多数，本文将主要讲解工具类APP的常见推送机制。</p><h1 id="三-PUSH-流程"><a href="#三-PUSH-流程" class="headerlink" title="三 PUSH 流程"></a>三 PUSH 流程</h1><p><img src="https://img.pmcaff.com/FlfolmCf7jnGE5r8yUCqPV5a3Tr--picture" alt="PUSH流程.JPG"></p><p>PUSH消息在消息系统创建好后进入发送阶段，服务端需要根据用户终端信息进行路由，如果是IOS系统，那么会调用苹果自身的推送通知服务（APNs）,如果用户的手机是安卓系统，那么根据不同的厂商去调用不同的厂商SDK。</p><p>对于不同的系统版本，支持的消息展示形式也是不同，比如IOS10之后，当APP在前台时，是否通知栏展示；此样式可以根据产品需求来选择，有服务端传输相应通知方式的值即可。如果用户的手机非五大厂商内的手机，可以通过自己搭建的长连接或者使用第三方服务进行推送。</p><p>如果不是自己直接对接厂商通道，那么内部的服务端可能无需做过多较为复杂繁琐的开发工作，通过接入第三方消息推送平台来实现消息的推送，比如信鸽、个推等。多数的通道会将消息是否成功推送到客户端SDK的回执数据反馈给发送方，需要提供回调地址。</p><h1 id="四-底层通道说明"><a href="#四-底层通道说明" class="headerlink" title="四 底层通道说明"></a>四 底层通道说明</h1><h2 id="4-1推送方式"><a href="#4-1推送方式" class="headerlink" title="4.1推送方式"></a>4.1推送方式</h2><p>通道类型一般分为三类：厂商通道、第三方推送服务平台、长连接。</p><p>厂商通道是手机终端厂商推出的推送服务，通过接入厂商SDK，内部服务端可以将消息推送到手机系统的服务端,再下发至客户端内部的厂商SDK，由操作系统进行相应展示，点击后唤起相应APP，这样可以避免APP进程被杀死后消息无法触达用户，因此触达率较高。</p><p>第三方推送平台是推送服务公司自己搭建相关的消息服务。并且各个APP使用了同一个平台的推送服务时，客户端都是集成同一个第三方推送平台的SDK，因此形成了一个推送联盟，当联盟中的其中一个APP的消息进程没有被杀死的时候，其他的APP也可以利用进行通知用户，形成了相互唤起，提高触达率。经过一些场景的测试，相互唤起的成功率并不是很高，需谨慎结合自身场景评估。为了提高触达率，第三方推送平台也会集成各大厂商的SDK进行推送。</p><p>长连接就是建立手机与服务端的一条链路进行消息数据推送，通过长连接也可以进行APP状态监控，但完全由长连接推送且保证触达的稳定，需要投入的研发资源较多,且需尽量避免自己的长连接进程不要被操作系统杀死。</p><h2 id="4-2优劣势对比"><a href="#4-2优劣势对比" class="headerlink" title="4.2优劣势对比"></a>4.2优劣势对比</h2><p><img src="https://img.pmcaff.com/FrJy5X0myRMYsO-9THXFWibGrGGs-picture" alt="push优劣势对比.JPG"></p><p>APP push功能的搭建需要依据产品自身的情况和公司可投入的资源成本为主，在不同的阶段应该追逐不同的目标。</p><h1 id="五-下发推送"><a href="#五-下发推送" class="headerlink" title="五 下发推送"></a>五 下发推送</h1><h2 id="5-1-推送账号"><a href="#5-1-推送账号" class="headerlink" title="5.1 推送账号"></a>5.1 推送账号</h2><p>推送时客户端的PUSH SDK均会根据用户的设备号生成一个对应关系的TOKEN。在SDK内部，如果使用的是第三方推送服务，则去第三方的SDK注册；如果是厂商，则去商城SDK注册；如果使用自己长连接，则去自己的SDK进行注册，作为后续推送的标识用户的唯一ID。</p><h2 id="5-2-消息路由"><a href="#5-2-消息路由" class="headerlink" title="5.2 消息路由"></a>5.2 消息路由</h2><p>消息路主要见上述推送流程的讲解，此处主要讲解根据不同的业务场景，可能会定向推送给不同版本APP的用户。因此服务端在通道能力路由的时候，不仅需要能够区分通道，还要进一步能够针对用户的手机终端进行更加精细化的差异推送。</p><p>此外，消息通道并一定是100%稳定，如果下游通道出现问题，服务端需能够将由于通道问题导致的消息路由到备用通道去发送，以保证业务稳定触达。</p><h2 id="5-3-全量推送"><a href="#5-3-全量推送" class="headerlink" title="5.3 全量推送"></a>5.3 全量推送</h2><p>一般来说，对于公司内部运营或公司的相关数据均是以产品的customer id为准，用户数据系统对接消息系统时也多为customer id，因此需建立customer id与推送TOKEN的关系，便于运营针对用户进行推送。但对于一些场景会需要针对未登录的用户也进行推送，即全量推送；比如突发重大新闻资讯、大促等活动，所以运营系统需要提供全量推送功能，针对所有TOKEN进行推送。</p><h1 id="六-数据上报"><a href="#六-数据上报" class="headerlink" title="六 数据上报"></a>六 数据上报</h1><p>上报数据包括触达 点击 关闭 退出 注册等数据。</p><p>对于所有方式的触达消息，都离不开触达与点击，触达的数据通过厂商的需要厂商回调上报，点击数据可以由SDK上报服务端。对于push的关闭，也是需要进行考量的，来评估push是否过度发送，打扰到了用户。关闭数据有两部分，一部分为app内部的关闭，sdk直接上报给服务端即可；另一部分为用户在手机操作系统上关闭了对应app的push，需要APP在前台时，sdk调用手机终端相关方法获取该用户是否关闭了系统通知，然后上报至服务端。</p><p>注册数据即用户首次启动APP时，去相关sdk注册token。</p><p>一般来说，用户退出账号时，sdk需要上报服务端，解除token与customer id的绑定关系。</p><h1 id="七-PUSH特点"><a href="#七-PUSH特点" class="headerlink" title="七 PUSH特点"></a>七 PUSH特点</h1><h2 id="7-1-强提醒-不留痕"><a href="#7-1-强提醒-不留痕" class="headerlink" title="7.1 强提醒 不留痕"></a>7.1 强提醒 不留痕</h2><p>push由于是app自己的通知渠道，是运营的一个重要工具。如果用户未关闭PUSH通知的话，push可以从通知栏弹出进行消息显示，具有一定的强提醒性，但PUSH点击跳转后便消失，没有痕迹，因此针对于重点的通知消息，需要在APP内设置消息中心，在PUSH的同时留下通知记录。</p><h2 id="7-2-消息样式"><a href="#7-2-消息样式" class="headerlink" title="7.2 消息样式"></a>7.2 消息样式</h2><p>对于各家PUSH来说，一些营销消息会加入EMOJI表情来吸引用户点击，这也是一个吸引用户点击的一个小方法，只要服务支持传输约定好的EMOJI码就可以了。</p><p>目前安卓系统也支持富媒体推送，推送包含图片、语音等形式，对于资讯类的APP可以增加缩略图，吸引用户点击。目前来看，语音场景还有点挖掘。</p><h2 id="7-3-IOS和安卓"><a href="#7-3-IOS和安卓" class="headerlink" title="7.3 IOS和安卓"></a>7.3 IOS和安卓</h2><p>由于APP是基于手机操作系统，因此对于IOS和安卓的推送的流程及功能基本相同，只不过细节和方法上略有不同，且国内安卓产商都在安卓系统上进行了一定改造，导致国内安卓厂商标准各不相同，需要开发同学仔细对接各个厂商。</p><h1 id="八触达率的提升"><a href="#八触达率的提升" class="headerlink" title="八触达率的提升"></a>八触达率的提升</h1><p>触达率的提升需要从消息创建到实际通知到用户的建立完整流程，细化每一个交互环节，发现影响触达率的主要瓶颈，并针对性地进行解决或优化方案。除此之外，未采用厂商通道的消息也可以采用自己的长连接和其他推送平台服务同时多条推送，在客户端的SDK内增加针对同一罅隙流水号的去重，这样可以也可以提高一部分消息的触达率。</p><p>以上内容为个人经验总结，欢迎讨论指正。</p><p>转自PMCAFF<a href="https://www.pmcaff.com/user/profile/7PQA50xdQw" target="_blank" rel="noopener">卓别木</a>,学习拜读！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;写作目的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲解关于APP PUSH的流程、机制及相关经验，一是为了方便各位可以针对APP迅速制定PUSH消息推送方案，实现0到1的推送功能搭建，二是可以了解下PUSH流程，对各个环节针对性地提高触达率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="好文章" scheme="http://wangyuehan.github.io/tags/%E5%A5%BD%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客微博图床失效解决办法</title>
    <link href="http://wangyuehan.github.io/year/04/25/hexo%E5%8D%9A%E5%AE%A2%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://wangyuehan.github.io/year/04/25/hexo博客微博图床失效解决办法/</id>
    <published>2019-04-25T12:29:04.000Z</published>
    <updated>2019-05-14T03:42:24.280Z</updated>
    
    <content type="html"><![CDATA[<p>刚才上传咖啡店猫星人图片发现，图挂了，然后去V2一看，都在吐槽。</p><p>镇定下来想了想，除了换图床外还是有解决的方法的。</p><p>(真的好无奈的索～～～)</p><a id="more"></a><p>比如我的hexo主题是yilia主题。</p><blockquote><p>\blog\themes\yilia\layout_partial\head.ejs</p></blockquote><p>修改上述路径的文件，jacman是所用的主题文件夹。因为每个页面都会包含head这个文件，在里面加上一行代码</p><blockquote><meta name="referrer" content="no-referrer"></blockquote><p>这样所有页面都会以no-referrer这样方法加载了，然后微博服务器就不知道是你的网站引用了他的图片了，也就没有外链限制的问题了。（暂时这么解决了，不知道微博会不会后续更加严格的限制外链。</p><p>mac上推荐使用iPic软件，支持又拍云和阿里云等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚才上传咖啡店猫星人图片发现，图挂了，然后去V2一看，都在吐槽。&lt;/p&gt;
&lt;p&gt;镇定下来想了想，除了换图床外还是有解决的方法的。&lt;/p&gt;
&lt;p&gt;(真的好无奈的索～～～)&lt;/p&gt;
    
    </summary>
    
    
      <category term="图床" scheme="http://wangyuehan.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>HexoClient</title>
    <link href="http://wangyuehan.github.io/year/04/25/HexoClient/"/>
    <id>http://wangyuehan.github.io/year/04/25/HexoClient/</id>
    <published>2019-04-25T06:56:34.000Z</published>
    <updated>2019-04-25T06:56:34.384Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="http://wangyuehan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://wangyuehan.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Centos配置nginx反向代理8090端口到80端口</title>
    <link href="http://wangyuehan.github.io/year/04/20/Centos%E9%85%8D%E7%BD%AEnginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%868090%E7%AB%AF%E5%8F%A3%E5%88%B080%E7%AB%AF%E5%8F%A3/"/>
    <id>http://wangyuehan.github.io/year/04/20/Centos配置nginx反向代理8090端口到80端口/</id>
    <published>2019-04-20T04:39:54.000Z</published>
    <updated>2019-04-20T04:43:36.219Z</updated>
    
    <content type="html"><![CDATA[<p>正好之前给老师做odoo的时候，用过nginx，有点经验。</p><p>估计新手都有同样的困惑，因为自己的web项目运行端口是8080或者8090等等，而域名默认是80端口，也就是说，你在输入域名的时候，后边总要加上冒号8090或者冒号8080等等，这就很麻烦了，而且很喽。这就需要借助nginx的反向代理功能，众所周知，nginx十分轻便，而且性能很棒，对于我们新手来说最大用处就是他的反向代理功能，通过端口映射，将非默认端口指向80端口。</p><a id="more"></a><p>下面，我就来说说怎么反向代理自己的项目到默认80端口。</p><p>1）安装nginx：yum install nginx -y</p><p>2）启动nginx:service nginx start或者systemctl start nginx.service</p><p>3）反向代理8080端口到80端口</p><p>​     1.找到nginx.conf:    whereis nginx.conf</p><p>​     2.根据上面找到的路径我们进入:[root@izm5ec1rs3oa3aqjvhlpxbz~ ]#cd /etc/nginx</p><p>​     3.打开配置文件进行配置：[root@izm5ec1rs3oa3aqjvhlpxbz ]#vi nginx.conf    下面是nginx.conf的一部分信息，进入修改配置信息</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g28zskk67sj30kt0duq4a.jpg" alt></p><p>　　4. 重启即可：nginx -s reload</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正好之前给老师做odoo的时候，用过nginx，有点经验。&lt;/p&gt;
&lt;p&gt;估计新手都有同样的困惑，因为自己的web项目运行端口是8080或者8090等等，而域名默认是80端口，也就是说，你在输入域名的时候，后边总要加上冒号8090或者冒号8080等等，这就很麻烦了，而且很喽。这就需要借助nginx的反向代理功能，众所周知，nginx十分轻便，而且性能很棒，对于我们新手来说最大用处就是他的反向代理功能，通过端口映射，将非默认端口指向80端口。&lt;/p&gt;
    
    </summary>
    
      <category term="玩物志" scheme="http://wangyuehan.github.io/categories/%E7%8E%A9%E7%89%A9%E5%BF%97/"/>
    
    
      <category term="nginx" scheme="http://wangyuehan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>玩docker-docker运行Halo</title>
    <link href="http://wangyuehan.github.io/year/04/19/%E7%8E%A9%E4%B9%90%E6%97%A5%E5%BF%97-docker%E8%BF%90%E8%A1%8CHalo/"/>
    <id>http://wangyuehan.github.io/year/04/19/玩乐日志-docker运行Halo/</id>
    <published>2019-04-19T11:30:39.000Z</published>
    <updated>2019-04-19T11:43:11.747Z</updated>
    
    <content type="html"><![CDATA[<p>之前在群里有些个小学弟搭建，但是没弄出来，估计很多新手也是搞不出来，又觉得hexo难，但是又想有一个自己的博客，比较苦恼。</p><p>正好有一台空闲服务器，这次我准备在阿里云购买的CentOS服务器上用docker容器运行Halo博客系统，没错，就是java编写的Halo博客。下面进入教程。</p><p>测试链接-<a href="http://47.105.33.34:8090/" target="_blank" rel="noopener">http://47.105.33.34:8090/</a></p><a id="more"></a><p>首先，我就当你们了解docker基本知识了。</p><p>直接开始，全新的系统。</p><h1 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1. 安装Docker"></a>1. 安装Docker</h1><p>移除旧的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>安装一些必要的系统工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加软件源信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新 yum 缓存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p>安装 Docker-ce：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>启动 Docker 后台服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="2-Docker部署Hola"><a href="#2-Docker部署Hola" class="headerlink" title="2. Docker部署Hola"></a>2. Docker部署Hola</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">$ docker pull ruibaby/halo</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">$ docker run -d --name halo -p 8090:8090 -v ~/halo:/root/halo -e DB_USER=root -e DB_PASSWORD=123456 ruibaby/halo</span><br><span class="line"></span><br><span class="line"># 注意：DB_USER 和 DB_PASSWORD 务必修改并记下</span><br></pre></td></tr></table></figure><h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">#看看是否运行</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g286gfkp5cj329408on07.jpg" alt></p><p>输入网址：外网ip:8090</p><p>输入网址会出现找不到网页情况，耐心等待几秒即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在群里有些个小学弟搭建，但是没弄出来，估计很多新手也是搞不出来，又觉得hexo难，但是又想有一个自己的博客，比较苦恼。&lt;/p&gt;
&lt;p&gt;正好有一台空闲服务器，这次我准备在阿里云购买的CentOS服务器上用docker容器运行Halo博客系统，没错，就是java编写的Halo博客。下面进入教程。&lt;/p&gt;
&lt;p&gt;测试链接-&lt;a href=&quot;http://47.105.33.34:8090/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://47.105.33.34:8090/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="玩物志" scheme="http://wangyuehan.github.io/categories/%E7%8E%A9%E7%89%A9%E5%BF%97/"/>
    
    
      <category term="docker" scheme="http://wangyuehan.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
